                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Sat Sep  3 15:01:27 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module main
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _font_arr
                                     13 	.globl _main
                                     14 	.globl _read_pkey
                                     15 	.globl _chgst
                                     16 	.globl _vbat
                                     17 	.globl _scf
                                     18 	.globl _ktime
                                     19 	.globl _chg_disp
                                     20 	.globl _page_id
                                     21 	.globl _pkeylock
                                     22 	.globl _pkeyp
                                     23 	.globl _readreg
                                     24 	.globl _delay_init
                                     25 	.globl _delay_us
                                     26 	.globl _delay_ms
                                     27 	.globl _delay_timer
                                     28 	.globl _clock_init
                                     29 	.globl _i2c_init
                                     30 	.globl _i2c_set_start
                                     31 	.globl _i2c_set_address
                                     32 	.globl _i2c_set_stop
                                     33 	.globl _i2c_clear_ack
                                     34 	.globl _i2c_set_ack
                                     35 	.globl _i2c_ack_pos_current
                                     36 	.globl _i2c_ack_pos_next
                                     37 	.globl _i2c_poll_SB
                                     38 	.globl _i2c_poll_ADDR
                                     39 	.globl _i2c_poll_BTF
                                     40 	.globl _i2c_poll_TXE
                                     41 	.globl _i2c_poll_RXNE
                                     42 	.globl _i2c_clear_bits
                                     43 	.globl _i2c_clear_ADDR
                                     44 	.globl _i2c_enable_interrupts
                                     45 	.globl _i2c_disable_interrupts
                                     46 	.globl _adc_init
                                     47 	.globl _read_adc
                                     48 	.globl _uart1_init
                                     49 	.globl _uart1_send
                                     50 	.globl _uart1_recv
                                     51 	.globl _uart1_recv_i
                                     52 	.globl _pwm1_init
                                     53 	.globl _pwm2_init
                                     54 	.globl _pwm1ch1_enable
                                     55 	.globl _pwm1ch1_disable
                                     56 	.globl _pwm2ch1_enable
                                     57 	.globl _pwm2ch1_disable
                                     58 	.globl _pwm1_update
                                     59 	.globl _pwm2_update
                                     60 	.globl _lcdn1202_gpio_init
                                     61 	.globl _lcdn1202_9bsend
                                     62 	.globl _lcdn1202_clock1
                                     63 	.globl _lcdn1202_blon
                                     64 	.globl _lcdn1202_bloff
                                     65 	.globl _lcdn1202_init
                                     66 	.globl _lcdn1202_sendcom
                                     67 	.globl _lcdn1202_senddat
                                     68 	.globl _lcdn1202_setpos
                                     69 	.globl _lcdn1202_clear
                                     70 	.globl _LCD_setpos
                                     71 	.globl _LCD_drawbyte
                                     72 	.globl _LCD_drawchar
                                     73 	.globl _LCD_drawtext
                                     74 	.globl _LCD_drawint
                                     75 	.globl _LCD_clear
                                     76 	.globl _LCD_clearblock
                                     77 	.globl _LCD_normal
                                     78 	.globl _LCD_reverse
                                     79 	.globl _LCD_BL_ON
                                     80 	.globl _LCD_BL_OFF
                                     81 	.globl _powerman_init
                                     82 	.globl _Power_Latch
                                     83 	.globl _Power_Unlatch
                                     84 	.globl _read_pkey
                                     85 	.globl _vbat_mon
                                     86 	.globl _chgst_mon
                                     87 	.globl _loop
                                     88 	.globl _Page_Charging
                                     89 	.globl _Page_Main
                                     90 	.globl _update_pkey
                                     91 	.globl _on_single_click
                                     92 	.globl _chg_single_click
                                     93 	.globl _disp_bat_status
                                     94 ;--------------------------------------------------------
                                     95 ; ram data
                                     96 ;--------------------------------------------------------
                                     97 	.area DATA
      000000                         98 _readreg::
      000000                         99 	.ds 1
      000001                        100 _pkeyp::
      000001                        101 	.ds 1
      000002                        102 _pkeylock::
      000002                        103 	.ds 1
      000003                        104 _page_id::
      000003                        105 	.ds 1
      000004                        106 _chg_disp::
      000004                        107 	.ds 1
      000005                        108 _ktime::
      000005                        109 	.ds 1
      000006                        110 _scf::
      000006                        111 	.ds 1
      000007                        112 _vbat::
      000007                        113 	.ds 2
      000009                        114 _chgst::
      000009                        115 	.ds 1
                                    116 ;--------------------------------------------------------
                                    117 ; ram data
                                    118 ;--------------------------------------------------------
                                    119 	.area INITIALIZED
                                    120 ;--------------------------------------------------------
                                    121 ; Stack segment in internal ram 
                                    122 ;--------------------------------------------------------
                                    123 	.area	SSEG
      000000                        124 __start__stack:
      000000                        125 	.ds	1
                                    126 
                                    127 ;--------------------------------------------------------
                                    128 ; absolute external ram data
                                    129 ;--------------------------------------------------------
                                    130 	.area DABS (ABS)
                                    131 ;--------------------------------------------------------
                                    132 ; interrupt vector 
                                    133 ;--------------------------------------------------------
                                    134 	.area HOME
      000000                        135 __interrupt_vect:
      000000 82v00u00u00            136 	int s_GSINIT ;reset
      000004 82 00 00 00            137 	int 0x0000 ;trap
      000008 82 00 00 00            138 	int 0x0000 ;int0
      00000C 82 00 00 00            139 	int 0x0000 ;int1
      000010 82 00 00 00            140 	int 0x0000 ;int2
      000014 82 00 00 00            141 	int 0x0000 ;int3
      000018 82 00 00 00            142 	int 0x0000 ;int4
      00001C 82 00 00 00            143 	int 0x0000 ;int5
      000020 82 00 00 00            144 	int 0x0000 ;int6
      000024 82 00 00 00            145 	int 0x0000 ;int7
      000028 82 00 00 00            146 	int 0x0000 ;int8
      00002C 82 00 00 00            147 	int 0x0000 ;int9
      000030 82 00 00 00            148 	int 0x0000 ;int10
      000034 82 00 00 00            149 	int 0x0000 ;int11
      000038 82 00 00 00            150 	int 0x0000 ;int12
      00003C 82 00 00 00            151 	int 0x0000 ;int13
      000040 82 00 00 00            152 	int 0x0000 ;int14
      000044 82 00 00 00            153 	int 0x0000 ;int15
      000048 82 00 00 00            154 	int 0x0000 ;int16
      00004C 82 00 00 00            155 	int 0x0000 ;int17
      000050 82 00 00 00            156 	int 0x0000 ;int18
      000054 82 00 00 00            157 	int 0x0000 ;int19
      000058 82 00 00 00            158 	int 0x0000 ;int20
      00005C 82 00 00 00            159 	int 0x0000 ;int21
      000060 82 00 00 00            160 	int 0x0000 ;int22
      000064 82 00 00 00            161 	int 0x0000 ;int23
      000068 82 00 00 00            162 	int 0x0000 ;int24
      00006C 82 00 00 00            163 	int 0x0000 ;int25
      000070 82 00 00 00            164 	int 0x0000 ;int26
      000074 82 00 00 00            165 	int 0x0000 ;int27
      000078 82 00 00 00            166 	int 0x0000 ;int28
      00007C 82 00 00 00            167 	int 0x0000 ;int29
                                    168 ;--------------------------------------------------------
                                    169 ; global & static initialisations
                                    170 ;--------------------------------------------------------
                                    171 	.area HOME
                                    172 	.area GSINIT
                                    173 	.area GSFINAL
                                    174 	.area GSINIT
      000000                        175 __sdcc_gs_init_startup:
      000000                        176 __sdcc_init_data:
                                    177 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  178 	ldw x, #l_DATA
      000003 27 07            [ 1]  179 	jreq	00002$
      000005                        180 00001$:
      000005 72 4FuFFuFF      [ 1]  181 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  182 	decw x
      00000A 26 F9            [ 1]  183 	jrne	00001$
      00000C                        184 00002$:
      00000C AEr00r00         [ 2]  185 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  186 	jreq	00004$
      000011                        187 00003$:
      000011 D6uFFuFF         [ 1]  188 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  189 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  190 	decw	x
      000018 26 F7            [ 1]  191 	jrne	00003$
      00001A                        192 00004$:
                                    193 ; stm8_genXINIT() end
                                    194 	.area GSFINAL
      000000 CCr00r80         [ 2]  195 	jp	__sdcc_program_startup
                                    196 ;--------------------------------------------------------
                                    197 ; Home
                                    198 ;--------------------------------------------------------
                                    199 	.area HOME
                                    200 	.area HOME
      000080                        201 __sdcc_program_startup:
      000080 CCr05rFE         [ 2]  202 	jp	_main
                                    203 ;	return from main will return to caller
                                    204 ;--------------------------------------------------------
                                    205 ; code
                                    206 ;--------------------------------------------------------
                                    207 	.area CODE
                                    208 ;	delay.c: 7: void delay_init()
                                    209 ;	-----------------------------------------
                                    210 ;	 function delay_init
                                    211 ;	-----------------------------------------
      000000                        212 _delay_init:
                                    213 ;	delay.c: 9: TIM4_PSCR = 4; // CLK/16
      000000 35 04 53 47      [ 1]  214 	mov	0x5347+0, #0x04
      000004 81               [ 4]  215 	ret
                                    216 ;	delay.c: 12: void delay_us(unsigned long delus)
                                    217 ;	-----------------------------------------
                                    218 ;	 function delay_us
                                    219 ;	-----------------------------------------
      000005                        220 _delay_us:
      000005 52 06            [ 2]  221 	sub	sp, #6
                                    222 ;	delay.c: 16: for(du=0;du<(delus/10);du++)
      000007 4B 0A            [ 1]  223 	push	#0x0a
      000009 5F               [ 1]  224 	clrw	x
      00000A 89               [ 2]  225 	pushw	x
      00000B 4B 00            [ 1]  226 	push	#0x00
      00000D 1E 0F            [ 2]  227 	ldw	x, (0x0f, sp)
      00000F 89               [ 2]  228 	pushw	x
      000010 1E 0F            [ 2]  229 	ldw	x, (0x0f, sp)
      000012 89               [ 2]  230 	pushw	x
      000013 CDr00r00         [ 4]  231 	call	__divulong
      000016 5B 08            [ 2]  232 	addw	sp, #8
      000018 1F 05            [ 2]  233 	ldw	(0x05, sp), x
      00001A 17 03            [ 2]  234 	ldw	(0x03, sp), y
      00001C 5F               [ 1]  235 	clrw	x
      00001D 1F 01            [ 2]  236 	ldw	(0x01, sp), x
      00001F                        237 00103$:
      00001F 1E 01            [ 2]  238 	ldw	x, (0x01, sp)
      000021 90 5F            [ 1]  239 	clrw	y
      000023 13 05            [ 2]  240 	cpw	x, (0x05, sp)
      000025 90 9F            [ 1]  241 	ld	a, yl
      000027 12 04            [ 1]  242 	sbc	a, (0x04, sp)
      000029 90 9E            [ 1]  243 	ld	a, yh
      00002B 12 03            [ 1]  244 	sbc	a, (0x03, sp)
      00002D 24 0D            [ 1]  245 	jrnc	00101$
                                    246 ;	delay.c: 18: delay_timer(100);
      00002F 4B 64            [ 1]  247 	push	#0x64
      000031 CDr00r9A         [ 4]  248 	call	_delay_timer
      000034 84               [ 1]  249 	pop	a
                                    250 ;	delay.c: 16: for(du=0;du<(delus/10);du++)
      000035 1E 01            [ 2]  251 	ldw	x, (0x01, sp)
      000037 5C               [ 2]  252 	incw	x
      000038 1F 01            [ 2]  253 	ldw	(0x01, sp), x
      00003A 20 E3            [ 2]  254 	jra	00103$
      00003C                        255 00101$:
                                    256 ;	delay.c: 20: delay_timer(delus%10);
      00003C 4B 0A            [ 1]  257 	push	#0x0a
      00003E 5F               [ 1]  258 	clrw	x
      00003F 89               [ 2]  259 	pushw	x
      000040 4B 00            [ 1]  260 	push	#0x00
      000042 1E 0F            [ 2]  261 	ldw	x, (0x0f, sp)
      000044 89               [ 2]  262 	pushw	x
      000045 1E 0F            [ 2]  263 	ldw	x, (0x0f, sp)
      000047 89               [ 2]  264 	pushw	x
      000048 CDr00r00         [ 4]  265 	call	__modulong
      00004B 5B 08            [ 2]  266 	addw	sp, #8
      00004D 9F               [ 1]  267 	ld	a, xl
      00004E 88               [ 1]  268 	push	a
      00004F CDr00r9A         [ 4]  269 	call	_delay_timer
      000052 5B 07            [ 2]  270 	addw	sp, #7
      000054 81               [ 4]  271 	ret
                                    272 ;	delay.c: 23: void delay_ms(unsigned long delms)
                                    273 ;	-----------------------------------------
                                    274 ;	 function delay_ms
                                    275 ;	-----------------------------------------
      000055                        276 _delay_ms:
      000055 52 08            [ 2]  277 	sub	sp, #8
                                    278 ;	delay.c: 27: for(dm=0;dm<(delms*100);dm++)
      000057 1E 0D            [ 2]  279 	ldw	x, (0x0d, sp)
      000059 89               [ 2]  280 	pushw	x
      00005A 1E 0D            [ 2]  281 	ldw	x, (0x0d, sp)
      00005C 89               [ 2]  282 	pushw	x
      00005D 4B 64            [ 1]  283 	push	#0x64
      00005F 5F               [ 1]  284 	clrw	x
      000060 89               [ 2]  285 	pushw	x
      000061 4B 00            [ 1]  286 	push	#0x00
      000063 CDr00r00         [ 4]  287 	call	__mullong
      000066 5B 08            [ 2]  288 	addw	sp, #8
      000068 1F 07            [ 2]  289 	ldw	(0x07, sp), x
      00006A 17 05            [ 2]  290 	ldw	(0x05, sp), y
      00006C 5F               [ 1]  291 	clrw	x
      00006D 4F               [ 1]  292 	clr	a
      00006E 0F 01            [ 1]  293 	clr	(0x01, sp)
      000070                        294 00103$:
      000070 88               [ 1]  295 	push	a
      000071 13 08            [ 2]  296 	cpw	x, (0x08, sp)
      000073 7B 01            [ 1]  297 	ld	a, (1, sp)
      000075 12 07            [ 1]  298 	sbc	a, (0x07, sp)
      000077 7B 02            [ 1]  299 	ld	a, (0x02, sp)
      000079 12 06            [ 1]  300 	sbc	a, (0x06, sp)
      00007B 84               [ 1]  301 	pop	a
      00007C 24 19            [ 1]  302 	jrnc	00105$
                                    303 ;	delay.c: 29: delay_timer(100);
      00007E 88               [ 1]  304 	push	a
      00007F 89               [ 2]  305 	pushw	x
      000080 4B 64            [ 1]  306 	push	#0x64
      000082 CDr00r9A         [ 4]  307 	call	_delay_timer
      000085 84               [ 1]  308 	pop	a
      000086 85               [ 2]  309 	popw	x
      000087 84               [ 1]  310 	pop	a
                                    311 ;	delay.c: 27: for(dm=0;dm<(delms*100);dm++)
      000088 1C 00 01         [ 2]  312 	addw	x, #0x0001
      00008B A9 00            [ 1]  313 	adc	a, #0x00
      00008D 88               [ 1]  314 	push	a
      00008E 7B 02            [ 1]  315 	ld	a, (0x02, sp)
      000090 A9 00            [ 1]  316 	adc	a, #0x00
      000092 6B 02            [ 1]  317 	ld	(0x02, sp), a
      000094 84               [ 1]  318 	pop	a
      000095 20 D9            [ 2]  319 	jra	00103$
      000097                        320 00105$:
      000097 5B 08            [ 2]  321 	addw	sp, #8
      000099 81               [ 4]  322 	ret
                                    323 ;	delay.c: 33: void delay_timer(unsigned char deltim)
                                    324 ;	-----------------------------------------
                                    325 ;	 function delay_timer
                                    326 ;	-----------------------------------------
      00009A                        327 _delay_timer:
                                    328 ;	delay.c: 35: TIM4_CR1 = (1<<TIM4_CR1_CEN);
      00009A 35 01 53 40      [ 1]  329 	mov	0x5340+0, #0x01
                                    330 ;	delay.c: 36: while(TIM4_CNTR<deltim);
      00009E                        331 00101$:
      00009E AE 53 46         [ 2]  332 	ldw	x, #0x5346
      0000A1 F6               [ 1]  333 	ld	a, (x)
      0000A2 11 03            [ 1]  334 	cp	a, (0x03, sp)
      0000A4 25 F8            [ 1]  335 	jrc	00101$
                                    336 ;	delay.c: 37: TIM4_CR1 = (0<<TIM4_CR1_CEN);
      0000A6 35 00 53 40      [ 1]  337 	mov	0x5340+0, #0x00
                                    338 ;	delay.c: 38: TIM4_CNTR = 0; //reset timer	
      0000AA 35 00 53 46      [ 1]  339 	mov	0x5346+0, #0x00
      0000AE 81               [ 4]  340 	ret
                                    341 ;	periph_stm8s.c: 16: void clock_init()
                                    342 ;	-----------------------------------------
                                    343 ;	 function clock_init
                                    344 ;	-----------------------------------------
      0000AF                        345 _clock_init:
                                    346 ;	periph_stm8s.c: 18: CLK_CKDIVR = 0x00; //fMASTER = fCPU = fHSI = 16MHz
      0000AF 35 00 50 C6      [ 1]  347 	mov	0x50c6+0, #0x00
                                    348 ;	periph_stm8s.c: 19: CLK_ICKR = (1<<CLK_ICKR_HSIEN);	//High Speed Internal RC Oscillator enabled
      0000B3 35 01 50 C0      [ 1]  349 	mov	0x50c0+0, #0x01
      0000B7 81               [ 4]  350 	ret
                                    351 ;	periph_stm8s.c: 24: void i2c_init()
                                    352 ;	-----------------------------------------
                                    353 ;	 function i2c_init
                                    354 ;	-----------------------------------------
      0000B8                        355 _i2c_init:
                                    356 ;	periph_stm8s.c: 26: I2C_CR1 = (0<<I2C_CR1_PE); //Disable I2C before configuration starts
      0000B8 35 00 52 10      [ 1]  357 	mov	0x5210+0, #0x00
                                    358 ;	periph_stm8s.c: 27: I2C_FREQR = 16;	//fCLK = 16 MHz
      0000BC 35 10 52 12      [ 1]  359 	mov	0x5212+0, #0x10
                                    360 ;	periph_stm8s.c: 28: I2C_CCRH = (0<<I2C_CCRH_FS)|(0<<I2C_CCRH_CCR11)|(0<<I2C_CCRH_CCR10)|(0<<I2C_CCRH_CCR9)|(0<<I2C_CCRH_CCR8); //Standard Mode
      0000C0 35 00 52 1C      [ 1]  361 	mov	0x521c+0, #0x00
                                    362 ;	periph_stm8s.c: 29: I2C_CCRL = 0x80;  //Clock Speed = 100 kHz
      0000C4 35 80 52 1B      [ 1]  363 	mov	0x521b+0, #0x80
                                    364 ;	periph_stm8s.c: 31: I2C_OARH = (0<<I2C_OARH_ADDMODE)|(1<<I2C_OARH_ADDCONF); //7-bit address mode, ADDCONF always must be 1
      0000C8 35 40 52 14      [ 1]  365 	mov	0x5214+0, #0x40
                                    366 ;	periph_stm8s.c: 32: I2C_TRISER = 17;  //Setup Bus Characteristic
      0000CC 35 11 52 1D      [ 1]  367 	mov	0x521d+0, #0x11
                                    368 ;	periph_stm8s.c: 37: I2C_CR1 = (1<<I2C_CR1_PE);  //Enable I2C after configuration complete
      0000D0 35 01 52 10      [ 1]  369 	mov	0x5210+0, #0x01
      0000D4 81               [ 4]  370 	ret
                                    371 ;	periph_stm8s.c: 40: void i2c_set_start()
                                    372 ;	-----------------------------------------
                                    373 ;	 function i2c_set_start
                                    374 ;	-----------------------------------------
      0000D5                        375 _i2c_set_start:
                                    376 ;	periph_stm8s.c: 42: I2C_CR2 |= (1<<I2C_CR2_START);
      0000D5 72 10 52 11      [ 1]  377 	bset	0x5211, #0
      0000D9 81               [ 4]  378 	ret
                                    379 ;	periph_stm8s.c: 45: void i2c_set_address(unsigned char addr, unsigned char dir)
                                    380 ;	-----------------------------------------
                                    381 ;	 function i2c_set_address
                                    382 ;	-----------------------------------------
      0000DA                        383 _i2c_set_address:
                                    384 ;	periph_stm8s.c: 47: if(dir==I2C_READ) I2C_DR = (addr<<1)|dir;
      0000DA 7B 03            [ 1]  385 	ld	a, (0x03, sp)
      0000DC 97               [ 1]  386 	ld	xl, a
      0000DD 58               [ 2]  387 	sllw	x
      0000DE 7B 04            [ 1]  388 	ld	a, (0x04, sp)
      0000E0 A1 01            [ 1]  389 	cp	a, #0x01
      0000E2 26 09            [ 1]  390 	jrne	00104$
      0000E4 9F               [ 1]  391 	ld	a, xl
      0000E5 1A 04            [ 1]  392 	or	a, (0x04, sp)
      0000E7 AE 52 16         [ 2]  393 	ldw	x, #0x5216
      0000EA F7               [ 1]  394 	ld	(x), a
      0000EB 20 0D            [ 2]  395 	jra	00106$
      0000ED                        396 00104$:
                                    397 ;	periph_stm8s.c: 48: else if(dir==I2C_WRITE) I2C_DR = (addr<<1)&dir;
      0000ED 7B 04            [ 1]  398 	ld	a, (0x04, sp)
      0000EF A1 FE            [ 1]  399 	cp	a, #0xfe
      0000F1 26 07            [ 1]  400 	jrne	00106$
      0000F3 9F               [ 1]  401 	ld	a, xl
      0000F4 14 04            [ 1]  402 	and	a, (0x04, sp)
      0000F6 AE 52 16         [ 2]  403 	ldw	x, #0x5216
      0000F9 F7               [ 1]  404 	ld	(x), a
      0000FA                        405 00106$:
      0000FA 81               [ 4]  406 	ret
                                    407 ;	periph_stm8s.c: 52: void i2c_set_stop()
                                    408 ;	-----------------------------------------
                                    409 ;	 function i2c_set_stop
                                    410 ;	-----------------------------------------
      0000FB                        411 _i2c_set_stop:
                                    412 ;	periph_stm8s.c: 54: I2C_CR2 |= (1<<I2C_CR2_STOP);
      0000FB AE 52 11         [ 2]  413 	ldw	x, #0x5211
      0000FE F6               [ 1]  414 	ld	a, (x)
      0000FF AA 02            [ 1]  415 	or	a, #0x02
      000101 F7               [ 1]  416 	ld	(x), a
      000102 81               [ 4]  417 	ret
                                    418 ;	periph_stm8s.c: 57: void i2c_clear_ack()
                                    419 ;	-----------------------------------------
                                    420 ;	 function i2c_clear_ack
                                    421 ;	-----------------------------------------
      000103                        422 _i2c_clear_ack:
                                    423 ;	periph_stm8s.c: 59: I2C_CR2 &= ~(1<<I2C_CR2_ACK); //Disable Acknowledge
      000103 AE 52 11         [ 2]  424 	ldw	x, #0x5211
      000106 F6               [ 1]  425 	ld	a, (x)
      000107 A4 FB            [ 1]  426 	and	a, #0xfb
      000109 F7               [ 1]  427 	ld	(x), a
      00010A 81               [ 4]  428 	ret
                                    429 ;	periph_stm8s.c: 62: void i2c_set_ack()
                                    430 ;	-----------------------------------------
                                    431 ;	 function i2c_set_ack
                                    432 ;	-----------------------------------------
      00010B                        433 _i2c_set_ack:
                                    434 ;	periph_stm8s.c: 64: I2C_CR2 |= (1<<I2C_CR2_ACK); //Enable Acknowledge
      00010B AE 52 11         [ 2]  435 	ldw	x, #0x5211
      00010E F6               [ 1]  436 	ld	a, (x)
      00010F AA 04            [ 1]  437 	or	a, #0x04
      000111 F7               [ 1]  438 	ld	(x), a
      000112 81               [ 4]  439 	ret
                                    440 ;	periph_stm8s.c: 67: void i2c_ack_pos_current()
                                    441 ;	-----------------------------------------
                                    442 ;	 function i2c_ack_pos_current
                                    443 ;	-----------------------------------------
      000113                        444 _i2c_ack_pos_current:
                                    445 ;	periph_stm8s.c: 69: I2C_CR2 &= ~(1<<I2C_CR2_POS); //ACK bit controls the (N)ACK of the current byte being received in the shift register
      000113 AE 52 11         [ 2]  446 	ldw	x, #0x5211
      000116 F6               [ 1]  447 	ld	a, (x)
      000117 A4 F7            [ 1]  448 	and	a, #0xf7
      000119 F7               [ 1]  449 	ld	(x), a
      00011A 81               [ 4]  450 	ret
                                    451 ;	periph_stm8s.c: 72: void i2c_ack_pos_next()
                                    452 ;	-----------------------------------------
                                    453 ;	 function i2c_ack_pos_next
                                    454 ;	-----------------------------------------
      00011B                        455 _i2c_ack_pos_next:
                                    456 ;	periph_stm8s.c: 74: I2C_CR2 |= (1<<I2C_CR2_POS); //ACK bit controls the (N)ACK of the next byte which will be received in the shift register
      00011B AE 52 11         [ 2]  457 	ldw	x, #0x5211
      00011E F6               [ 1]  458 	ld	a, (x)
      00011F AA 08            [ 1]  459 	or	a, #0x08
      000121 F7               [ 1]  460 	ld	(x), a
      000122 81               [ 4]  461 	ret
                                    462 ;	periph_stm8s.c: 77: void i2c_poll_SB()
                                    463 ;	-----------------------------------------
                                    464 ;	 function i2c_poll_SB
                                    465 ;	-----------------------------------------
      000123                        466 _i2c_poll_SB:
                                    467 ;	periph_stm8s.c: 79: while((I2C_SR1&(1<<I2C_SR1_SB))!=(1<<I2C_SR1_SB)){}
      000123                        468 00101$:
      000123 AE 52 17         [ 2]  469 	ldw	x, #0x5217
      000126 F6               [ 1]  470 	ld	a, (x)
      000127 A4 01            [ 1]  471 	and	a, #0x01
      000129 A1 01            [ 1]  472 	cp	a, #0x01
      00012B 26 F6            [ 1]  473 	jrne	00101$
      00012D 81               [ 4]  474 	ret
                                    475 ;	periph_stm8s.c: 82: void i2c_poll_ADDR()
                                    476 ;	-----------------------------------------
                                    477 ;	 function i2c_poll_ADDR
                                    478 ;	-----------------------------------------
      00012E                        479 _i2c_poll_ADDR:
                                    480 ;	periph_stm8s.c: 84: while((I2C_SR1&(1<<I2C_SR1_ADDR))!=(1<<I2C_SR1_ADDR)){}
      00012E                        481 00101$:
      00012E AE 52 17         [ 2]  482 	ldw	x, #0x5217
      000131 F6               [ 1]  483 	ld	a, (x)
      000132 A4 02            [ 1]  484 	and	a, #0x02
      000134 A1 02            [ 1]  485 	cp	a, #0x02
      000136 26 F6            [ 1]  486 	jrne	00101$
      000138 81               [ 4]  487 	ret
                                    488 ;	periph_stm8s.c: 87: void i2c_poll_BTF()
                                    489 ;	-----------------------------------------
                                    490 ;	 function i2c_poll_BTF
                                    491 ;	-----------------------------------------
      000139                        492 _i2c_poll_BTF:
                                    493 ;	periph_stm8s.c: 89: while((I2C_SR1&(1<<I2C_SR1_BTF))!=(1<<I2C_SR1_BTF)){}
      000139                        494 00101$:
      000139 AE 52 17         [ 2]  495 	ldw	x, #0x5217
      00013C F6               [ 1]  496 	ld	a, (x)
      00013D A4 04            [ 1]  497 	and	a, #0x04
      00013F A1 04            [ 1]  498 	cp	a, #0x04
      000141 26 F6            [ 1]  499 	jrne	00101$
      000143 81               [ 4]  500 	ret
                                    501 ;	periph_stm8s.c: 92: void i2c_poll_TXE()
                                    502 ;	-----------------------------------------
                                    503 ;	 function i2c_poll_TXE
                                    504 ;	-----------------------------------------
      000144                        505 _i2c_poll_TXE:
                                    506 ;	periph_stm8s.c: 94: while((I2C_SR1&(1<<I2C_SR1_TXE))!=(1<<I2C_SR1_TXE)){}
      000144                        507 00101$:
      000144 AE 52 17         [ 2]  508 	ldw	x, #0x5217
      000147 F6               [ 1]  509 	ld	a, (x)
      000148 A4 80            [ 1]  510 	and	a, #0x80
      00014A A1 80            [ 1]  511 	cp	a, #0x80
      00014C 26 F6            [ 1]  512 	jrne	00101$
      00014E 81               [ 4]  513 	ret
                                    514 ;	periph_stm8s.c: 97: void i2c_poll_RXNE()
                                    515 ;	-----------------------------------------
                                    516 ;	 function i2c_poll_RXNE
                                    517 ;	-----------------------------------------
      00014F                        518 _i2c_poll_RXNE:
                                    519 ;	periph_stm8s.c: 99: while((I2C_SR1&(1<<I2C_SR1_RXNE))!=(1<<I2C_SR1_RXNE)){}
      00014F                        520 00101$:
      00014F AE 52 17         [ 2]  521 	ldw	x, #0x5217
      000152 F6               [ 1]  522 	ld	a, (x)
      000153 A4 40            [ 1]  523 	and	a, #0x40
      000155 A1 40            [ 1]  524 	cp	a, #0x40
      000157 26 F6            [ 1]  525 	jrne	00101$
      000159 81               [ 4]  526 	ret
                                    527 ;	periph_stm8s.c: 102: void i2c_clear_bits()
                                    528 ;	-----------------------------------------
                                    529 ;	 function i2c_clear_bits
                                    530 ;	-----------------------------------------
      00015A                        531 _i2c_clear_bits:
                                    532 ;	periph_stm8s.c: 104: readreg = I2C_SR1;
      00015A AE 52 17         [ 2]  533 	ldw	x, #0x5217
      00015D F6               [ 1]  534 	ld	a, (x)
      00015E C7u00u00         [ 1]  535 	ld	_readreg+0, a
      000161 81               [ 4]  536 	ret
                                    537 ;	periph_stm8s.c: 107: void i2c_clear_ADDR()
                                    538 ;	-----------------------------------------
                                    539 ;	 function i2c_clear_ADDR
                                    540 ;	-----------------------------------------
      000162                        541 _i2c_clear_ADDR:
                                    542 ;	periph_stm8s.c: 109: readreg = I2C_SR1;
      000162 AE 52 17         [ 2]  543 	ldw	x, #0x5217
      000165 F6               [ 1]  544 	ld	a, (x)
                                    545 ;	periph_stm8s.c: 110: readreg = I2C_SR3;
      000166 AE 52 19         [ 2]  546 	ldw	x, #0x5219
      000169 F6               [ 1]  547 	ld	a, (x)
      00016A C7u00u00         [ 1]  548 	ld	_readreg+0, a
      00016D 81               [ 4]  549 	ret
                                    550 ;	periph_stm8s.c: 113: void i2c_enable_interrupts()
                                    551 ;	-----------------------------------------
                                    552 ;	 function i2c_enable_interrupts
                                    553 ;	-----------------------------------------
      00016E                        554 _i2c_enable_interrupts:
                                    555 ;	periph_stm8s.c: 115: I2C_ITR = 0x07;
      00016E 35 07 52 1A      [ 1]  556 	mov	0x521a+0, #0x07
      000172 81               [ 4]  557 	ret
                                    558 ;	periph_stm8s.c: 117: void i2c_disable_interrupts()
                                    559 ;	-----------------------------------------
                                    560 ;	 function i2c_disable_interrupts
                                    561 ;	-----------------------------------------
      000173                        562 _i2c_disable_interrupts:
                                    563 ;	periph_stm8s.c: 119: I2C_ITR = 0x00;
      000173 35 00 52 1A      [ 1]  564 	mov	0x521a+0, #0x00
      000177 81               [ 4]  565 	ret
                                    566 ;	periph_stm8s.c: 124: void adc_init()
                                    567 ;	-----------------------------------------
                                    568 ;	 function adc_init
                                    569 ;	-----------------------------------------
      000178                        570 _adc_init:
                                    571 ;	periph_stm8s.c: 126: ADC1_CR1 = fADC_fMASTER_8<<ADC1_CR1_SPSEL; // ADCCLK = MCLK/8
      000178 35 40 54 01      [ 1]  572 	mov	0x5401+0, #0x40
                                    573 ;	periph_stm8s.c: 127: ADC1_CR2 = (1<<ADC1_CR2_ALIGN);  // right alignment adc data
      00017C 35 08 54 02      [ 1]  574 	mov	0x5402+0, #0x08
                                    575 ;	periph_stm8s.c: 129: ADC1_CR1 |= (1<<ADC1_CR1_ADON);  // turn on ADC
      000180 72 10 54 01      [ 1]  576 	bset	0x5401, #0
      000184 81               [ 4]  577 	ret
                                    578 ;	periph_stm8s.c: 133: unsigned int read_adc(unsigned char adcch)
                                    579 ;	-----------------------------------------
                                    580 ;	 function read_adc
                                    581 ;	-----------------------------------------
      000185                        582 _read_adc:
      000185 52 04            [ 2]  583 	sub	sp, #4
                                    584 ;	periph_stm8s.c: 137: ADC1_CSR &= 0xF0;  // select
      000187 AE 54 00         [ 2]  585 	ldw	x, #0x5400
      00018A F6               [ 1]  586 	ld	a, (x)
      00018B A4 F0            [ 1]  587 	and	a, #0xf0
      00018D F7               [ 1]  588 	ld	(x), a
                                    589 ;	periph_stm8s.c: 138: ADC1_CSR |= adcch; // channel
      00018E AE 54 00         [ 2]  590 	ldw	x, #0x5400
      000191 F6               [ 1]  591 	ld	a, (x)
      000192 1A 07            [ 1]  592 	or	a, (0x07, sp)
      000194 AE 54 00         [ 2]  593 	ldw	x, #0x5400
      000197 F7               [ 1]  594 	ld	(x), a
                                    595 ;	periph_stm8s.c: 141: ADC1_CR1 |= (1<<ADC1_CR1_ADON); // start conversion
      000198 72 10 54 01      [ 1]  596 	bset	0x5401, #0
                                    597 ;	periph_stm8s.c: 142: while(!((ADC1_CSR)&(1<<ADC1_CSR_EOC)));; // conversion is in progress
      00019C                        598 00101$:
      00019C AE 54 00         [ 2]  599 	ldw	x, #0x5400
      00019F F6               [ 1]  600 	ld	a, (x)
      0001A0 4D               [ 1]  601 	tnz	a
      0001A1 2A F9            [ 1]  602 	jrpl	00101$
                                    603 ;	periph_stm8s.c: 143: adcval = (ADC1_DRH<<8) + ADC1_DRL;
      0001A3 AE 54 04         [ 2]  604 	ldw	x, #0x5404
      0001A6 F6               [ 1]  605 	ld	a, (x)
      0001A7 0F 03            [ 1]  606 	clr	(0x03, sp)
      0001A9 6B 01            [ 1]  607 	ld	(0x01, sp), a
      0001AB 0F 02            [ 1]  608 	clr	(0x02, sp)
      0001AD AE 54 05         [ 2]  609 	ldw	x, #0x5405
      0001B0 F6               [ 1]  610 	ld	a, (x)
      0001B1 5F               [ 1]  611 	clrw	x
      0001B2 97               [ 1]  612 	ld	xl, a
      0001B3 72 FB 01         [ 2]  613 	addw	x, (0x01, sp)
                                    614 ;	periph_stm8s.c: 144: ADC1_CSR |= (0<<ADC1_CSR_EOC); // reset EOC
      0001B6 90 AE 54 00      [ 2]  615 	ldw	y, #0x5400
      0001BA 90 F6            [ 1]  616 	ld	a, (y)
      0001BC 90 AE 54 00      [ 2]  617 	ldw	y, #0x5400
      0001C0 90 F7            [ 1]  618 	ld	(y), a
                                    619 ;	periph_stm8s.c: 146: return adcval;
      0001C2 5B 04            [ 2]  620 	addw	sp, #4
      0001C4 81               [ 4]  621 	ret
                                    622 ;	periph_stm8s.c: 151: void uart1_init(unsigned char rxien) //UART Initialization
                                    623 ;	-----------------------------------------
                                    624 ;	 function uart1_init
                                    625 ;	-----------------------------------------
      0001C5                        626 _uart1_init:
                                    627 ;	periph_stm8s.c: 155: UART1_BRR1 = 0x68;
      0001C5 35 68 52 32      [ 1]  628 	mov	0x5232+0, #0x68
                                    629 ;	periph_stm8s.c: 156: UART1_BRR2 = 0x03;
      0001C9 35 03 52 33      [ 1]  630 	mov	0x5233+0, #0x03
                                    631 ;	periph_stm8s.c: 158: UART1_CR1 |= (0<<UART1_CR1_M)|(0<<UART1_CR1_PCEN); //8 bit Data; No Parity
      0001CD AE 52 34         [ 2]  632 	ldw	x, #0x5234
      0001D0 F6               [ 1]  633 	ld	a, (x)
      0001D1 AE 52 34         [ 2]  634 	ldw	x, #0x5234
      0001D4 F7               [ 1]  635 	ld	(x), a
                                    636 ;	periph_stm8s.c: 159: UART1_CR3 |= (0<<UART1_CR3_STOP); //Stop Bit = 1
      0001D5 AE 52 36         [ 2]  637 	ldw	x, #0x5236
      0001D8 F6               [ 1]  638 	ld	a, (x)
      0001D9 AE 52 36         [ 2]  639 	ldw	x, #0x5236
      0001DC F7               [ 1]  640 	ld	(x), a
                                    641 ;	periph_stm8s.c: 161: if(rxien==1) 
      0001DD 7B 03            [ 1]  642 	ld	a, (0x03, sp)
      0001DF A1 01            [ 1]  643 	cp	a, #0x01
      0001E1 26 0B            [ 1]  644 	jrne	00102$
                                    645 ;	periph_stm8s.c: 163: UART1_CR2 |= (1<<UART1_CR2_RIEN); //Enable Interrupt on Receiver Mode
      0001E3 AE 52 35         [ 2]  646 	ldw	x, #0x5235
      0001E6 F6               [ 1]  647 	ld	a, (x)
      0001E7 AA 20            [ 1]  648 	or	a, #0x20
      0001E9 F7               [ 1]  649 	ld	(x), a
                                    650 ;	periph_stm8s.c: 164: ITC_SPR5 = (level_2<<ITC_SPR5_VECT18); //UART Interrupt Setting
      0001EA 35 00 7F 74      [ 1]  651 	mov	0x7f74+0, #0x00
      0001EE                        652 00102$:
                                    653 ;	periph_stm8s.c: 167: UART1_CR2 |= (1<<UART1_CR2_TEN); //Enable Transmitter Mode
      0001EE AE 52 35         [ 2]  654 	ldw	x, #0x5235
      0001F1 F6               [ 1]  655 	ld	a, (x)
      0001F2 AA 08            [ 1]  656 	or	a, #0x08
      0001F4 F7               [ 1]  657 	ld	(x), a
                                    658 ;	periph_stm8s.c: 168: UART1_CR2 |= (1<<UART1_CR2_REN); //Enable Receiver Mode
      0001F5 AE 52 35         [ 2]  659 	ldw	x, #0x5235
      0001F8 F6               [ 1]  660 	ld	a, (x)
      0001F9 AA 04            [ 1]  661 	or	a, #0x04
      0001FB F7               [ 1]  662 	ld	(x), a
      0001FC 81               [ 4]  663 	ret
                                    664 ;	periph_stm8s.c: 171: void uart1_send(unsigned char usend) //UART Transmit a Byte
                                    665 ;	-----------------------------------------
                                    666 ;	 function uart1_send
                                    667 ;	-----------------------------------------
      0001FD                        668 _uart1_send:
                                    669 ;	periph_stm8s.c: 173: UART1_DR = usend; //Write to UART Data Register
      0001FD AE 52 31         [ 2]  670 	ldw	x, #0x5231
      000200 7B 03            [ 1]  671 	ld	a, (0x03, sp)
      000202 F7               [ 1]  672 	ld	(x), a
                                    673 ;	periph_stm8s.c: 174: while((UART1_SR&(1<<UART1_SR_TXE))!=(1<<UART1_SR_TXE)); //Wait until Transmission complete
      000203                        674 00101$:
      000203 AE 52 30         [ 2]  675 	ldw	x, #0x5230
      000206 F6               [ 1]  676 	ld	a, (x)
      000207 A4 80            [ 1]  677 	and	a, #0x80
      000209 A1 80            [ 1]  678 	cp	a, #0x80
      00020B 26 F6            [ 1]  679 	jrne	00101$
      00020D 81               [ 4]  680 	ret
                                    681 ;	periph_stm8s.c: 177: unsigned char uart1_recv() //UART Receive a Byte (using Polling)
                                    682 ;	-----------------------------------------
                                    683 ;	 function uart1_recv
                                    684 ;	-----------------------------------------
      00020E                        685 _uart1_recv:
                                    686 ;	periph_stm8s.c: 180: if((UART1_SR&(1<<UART1_SR_RXNE))==(1<<UART1_SR_RXNE)) //Check if any data in Data Register
      00020E AE 52 30         [ 2]  687 	ldw	x, #0x5230
      000211 F6               [ 1]  688 	ld	a, (x)
      000212 A4 20            [ 1]  689 	and	a, #0x20
      000214 A1 20            [ 1]  690 	cp	a, #0x20
      000216 26 05            [ 1]  691 	jrne	00102$
                                    692 ;	periph_stm8s.c: 182: urecv = UART1_DR; //Read Data Register (RXNE cleared automatically)
      000218 AE 52 31         [ 2]  693 	ldw	x, #0x5231
      00021B F6               [ 1]  694 	ld	a, (x)
                                    695 ;	periph_stm8s.c: 184: else urecv=0;
      00021C 21                     696 	.byte 0x21
      00021D                        697 00102$:
      00021D 4F               [ 1]  698 	clr	a
      00021E                        699 00103$:
                                    700 ;	periph_stm8s.c: 185: return urecv;
      00021E 81               [ 4]  701 	ret
                                    702 ;	periph_stm8s.c: 188: unsigned char uart1_recv_i() //UART Receive a Byte (using Interrupt)
                                    703 ;	-----------------------------------------
                                    704 ;	 function uart1_recv_i
                                    705 ;	-----------------------------------------
      00021F                        706 _uart1_recv_i:
                                    707 ;	periph_stm8s.c: 191: urecv = UART1_DR; //Read Data Register (RXNE cleared automatically)
      00021F AE 52 31         [ 2]  708 	ldw	x, #0x5231
      000222 F6               [ 1]  709 	ld	a, (x)
                                    710 ;	periph_stm8s.c: 192: return urecv;
      000223 81               [ 4]  711 	ret
                                    712 ;	periph_stm8s.c: 198: void pwm1_init(unsigned int timval)
                                    713 ;	-----------------------------------------
                                    714 ;	 function pwm1_init
                                    715 ;	-----------------------------------------
      000224                        716 _pwm1_init:
      000224 52 02            [ 2]  717 	sub	sp, #2
                                    718 ;	periph_stm8s.c: 200: TIM1_PSCRH = 0x00; //TIM_CLK = CLK
      000226 35 00 52 60      [ 1]  719 	mov	0x5260+0, #0x00
                                    720 ;	periph_stm8s.c: 201: TIM1_PSCRL = 0x00; //TIM_CLK = CLK
      00022A 35 00 52 61      [ 1]  721 	mov	0x5261+0, #0x00
                                    722 ;	periph_stm8s.c: 202: TIM1_ARRH = (timval >> 8); //TIM RELOAD
      00022E 7B 05            [ 1]  723 	ld	a, (0x05, sp)
      000230 0F 01            [ 1]  724 	clr	(0x01, sp)
      000232 AE 52 62         [ 2]  725 	ldw	x, #0x5262
      000235 F7               [ 1]  726 	ld	(x), a
                                    727 ;	periph_stm8s.c: 203: TIM1_ARRL = (timval & 0x00FF); //TIM RELOAD
      000236 7B 06            [ 1]  728 	ld	a, (0x06, sp)
      000238 95               [ 1]  729 	ld	xh, a
      000239 4F               [ 1]  730 	clr	a
      00023A 9E               [ 1]  731 	ld	a, xh
      00023B AE 52 63         [ 2]  732 	ldw	x, #0x5263
      00023E F7               [ 1]  733 	ld	(x), a
                                    734 ;	periph_stm8s.c: 204: pwm1ch1_enable();
      00023F CDr02r9A         [ 4]  735 	call	_pwm1ch1_enable
                                    736 ;	periph_stm8s.c: 205: TIM1_CCER1 |= (0<<TIM1_CCER1_CC1P); //Output active high
      000242 AE 52 5C         [ 2]  737 	ldw	x, #0x525c
      000245 F6               [ 1]  738 	ld	a, (x)
      000246 AE 52 5C         [ 2]  739 	ldw	x, #0x525c
      000249 F7               [ 1]  740 	ld	(x), a
                                    741 ;	periph_stm8s.c: 206: TIM1_CCMR1 = (TIM1_OCxREF_PWM_mode1<<TIM1_CCMR1_OC1M); //PWM MODE 1 for Channel 1
      00024A 35 60 52 58      [ 1]  742 	mov	0x5258+0, #0x60
                                    743 ;	periph_stm8s.c: 207: pwm1_update(0x0000); //Start Value
      00024E 5F               [ 1]  744 	clrw	x
      00024F 89               [ 2]  745 	pushw	x
      000250 CDr02rAE         [ 4]  746 	call	_pwm1_update
      000253 5B 02            [ 2]  747 	addw	sp, #2
                                    748 ;	periph_stm8s.c: 208: TIM1_BKR = (1<<TIM1_BKR_MOE); //ENABLE MAIN OUTPUT 
      000255 35 80 52 6D      [ 1]  749 	mov	0x526d+0, #0x80
                                    750 ;	periph_stm8s.c: 209: TIM1_CR1 |= (1<<TIM1_CR1_CEN); //ENABLE TIM
      000259 AE 52 50         [ 2]  751 	ldw	x, #0x5250
      00025C F6               [ 1]  752 	ld	a, (x)
      00025D AA 01            [ 1]  753 	or	a, #0x01
      00025F F7               [ 1]  754 	ld	(x), a
      000260 5B 02            [ 2]  755 	addw	sp, #2
      000262 81               [ 4]  756 	ret
                                    757 ;	periph_stm8s.c: 212: void pwm2_init(unsigned int timval)
                                    758 ;	-----------------------------------------
                                    759 ;	 function pwm2_init
                                    760 ;	-----------------------------------------
      000263                        761 _pwm2_init:
      000263 52 02            [ 2]  762 	sub	sp, #2
                                    763 ;	periph_stm8s.c: 214: TIM2_PSCR = 0x00; //TIM_CLK = CLK
      000265 35 00 53 0E      [ 1]  764 	mov	0x530e+0, #0x00
                                    765 ;	periph_stm8s.c: 215: TIM2_ARRH = (timval >> 8); //TIM RELOAD
      000269 7B 05            [ 1]  766 	ld	a, (0x05, sp)
      00026B 0F 01            [ 1]  767 	clr	(0x01, sp)
      00026D AE 53 0F         [ 2]  768 	ldw	x, #0x530f
      000270 F7               [ 1]  769 	ld	(x), a
                                    770 ;	periph_stm8s.c: 216: TIM2_ARRL = (timval & 0x00FF); //TIM RELOAD
      000271 7B 06            [ 1]  771 	ld	a, (0x06, sp)
      000273 95               [ 1]  772 	ld	xh, a
      000274 4F               [ 1]  773 	clr	a
      000275 9E               [ 1]  774 	ld	a, xh
      000276 AE 53 10         [ 2]  775 	ldw	x, #0x5310
      000279 F7               [ 1]  776 	ld	(x), a
                                    777 ;	periph_stm8s.c: 217: pwm2ch1_enable();
      00027A CDr02rA4         [ 4]  778 	call	_pwm2ch1_enable
                                    779 ;	periph_stm8s.c: 218: TIM2_CCER1 |= (0<<TIM2_CCER1_CC1P); //Output active high
      00027D AE 53 0A         [ 2]  780 	ldw	x, #0x530a
      000280 F6               [ 1]  781 	ld	a, (x)
      000281 AE 53 0A         [ 2]  782 	ldw	x, #0x530a
      000284 F7               [ 1]  783 	ld	(x), a
                                    784 ;	periph_stm8s.c: 219: TIM2_CCMR1 = (TIM2_OCxREF_PWM_mode1<<TIM2_CCMR1_OC1M); //PWM MODE 1 for Channel 1 
      000285 35 60 53 07      [ 1]  785 	mov	0x5307+0, #0x60
                                    786 ;	periph_stm8s.c: 220: pwm2_update(0x0000); //Start Value
      000289 5F               [ 1]  787 	clrw	x
      00028A 89               [ 2]  788 	pushw	x
      00028B CDr02rC4         [ 4]  789 	call	_pwm2_update
      00028E 5B 02            [ 2]  790 	addw	sp, #2
                                    791 ;	periph_stm8s.c: 221: TIM2_CR1 |= (1<<TIM2_CR1_CEN); //ENABLE TIM
      000290 AE 53 00         [ 2]  792 	ldw	x, #0x5300
      000293 F6               [ 1]  793 	ld	a, (x)
      000294 AA 01            [ 1]  794 	or	a, #0x01
      000296 F7               [ 1]  795 	ld	(x), a
      000297 5B 02            [ 2]  796 	addw	sp, #2
      000299 81               [ 4]  797 	ret
                                    798 ;	periph_stm8s.c: 224: void pwm1ch1_enable()
                                    799 ;	-----------------------------------------
                                    800 ;	 function pwm1ch1_enable
                                    801 ;	-----------------------------------------
      00029A                        802 _pwm1ch1_enable:
                                    803 ;	periph_stm8s.c: 226: TIM1_CCER1 |= (1<<TIM1_CCER1_CC1E);
      00029A 72 10 52 5C      [ 1]  804 	bset	0x525c, #0
      00029E 81               [ 4]  805 	ret
                                    806 ;	periph_stm8s.c: 229: void pwm1ch1_disable()
                                    807 ;	-----------------------------------------
                                    808 ;	 function pwm1ch1_disable
                                    809 ;	-----------------------------------------
      00029F                        810 _pwm1ch1_disable:
                                    811 ;	periph_stm8s.c: 231: TIM1_CCER1 &= ~(1<<TIM1_CCER1_CC1E);
      00029F 72 11 52 5C      [ 1]  812 	bres	0x525c, #0
      0002A3 81               [ 4]  813 	ret
                                    814 ;	periph_stm8s.c: 234: void pwm2ch1_enable()
                                    815 ;	-----------------------------------------
                                    816 ;	 function pwm2ch1_enable
                                    817 ;	-----------------------------------------
      0002A4                        818 _pwm2ch1_enable:
                                    819 ;	periph_stm8s.c: 236: TIM2_CCER1 |= (1<<TIM2_CCER1_CC1E);
      0002A4 72 10 53 0A      [ 1]  820 	bset	0x530a, #0
      0002A8 81               [ 4]  821 	ret
                                    822 ;	periph_stm8s.c: 239: void pwm2ch1_disable()
                                    823 ;	-----------------------------------------
                                    824 ;	 function pwm2ch1_disable
                                    825 ;	-----------------------------------------
      0002A9                        826 _pwm2ch1_disable:
                                    827 ;	periph_stm8s.c: 241: TIM2_CCER1 &= ~(1<<TIM2_CCER1_CC1E);
      0002A9 72 11 53 0A      [ 1]  828 	bres	0x530a, #0
      0002AD 81               [ 4]  829 	ret
                                    830 ;	periph_stm8s.c: 244: void pwm1_update(unsigned int pwmval)
                                    831 ;	-----------------------------------------
                                    832 ;	 function pwm1_update
                                    833 ;	-----------------------------------------
      0002AE                        834 _pwm1_update:
      0002AE 52 02            [ 2]  835 	sub	sp, #2
                                    836 ;	periph_stm8s.c: 246: TIM1_CCR1L = (pwmval & 0x00FF);
      0002B0 7B 06            [ 1]  837 	ld	a, (0x06, sp)
      0002B2 95               [ 1]  838 	ld	xh, a
      0002B3 4F               [ 1]  839 	clr	a
      0002B4 9E               [ 1]  840 	ld	a, xh
      0002B5 AE 52 66         [ 2]  841 	ldw	x, #0x5266
      0002B8 F7               [ 1]  842 	ld	(x), a
                                    843 ;	periph_stm8s.c: 247: TIM1_CCR1H = (pwmval >> 8);
      0002B9 7B 05            [ 1]  844 	ld	a, (0x05, sp)
      0002BB 0F 01            [ 1]  845 	clr	(0x01, sp)
      0002BD AE 52 65         [ 2]  846 	ldw	x, #0x5265
      0002C0 F7               [ 1]  847 	ld	(x), a
      0002C1 5B 02            [ 2]  848 	addw	sp, #2
      0002C3 81               [ 4]  849 	ret
                                    850 ;	periph_stm8s.c: 250: void pwm2_update(unsigned int pwmval)
                                    851 ;	-----------------------------------------
                                    852 ;	 function pwm2_update
                                    853 ;	-----------------------------------------
      0002C4                        854 _pwm2_update:
      0002C4 52 02            [ 2]  855 	sub	sp, #2
                                    856 ;	periph_stm8s.c: 252: TIM2_CCR1L = (pwmval & 0x00FF);
      0002C6 7B 06            [ 1]  857 	ld	a, (0x06, sp)
      0002C8 95               [ 1]  858 	ld	xh, a
      0002C9 4F               [ 1]  859 	clr	a
      0002CA 9E               [ 1]  860 	ld	a, xh
      0002CB AE 53 12         [ 2]  861 	ldw	x, #0x5312
      0002CE F7               [ 1]  862 	ld	(x), a
                                    863 ;	periph_stm8s.c: 253: TIM2_CCR1H = (pwmval >> 8);
      0002CF 7B 05            [ 1]  864 	ld	a, (0x05, sp)
      0002D1 0F 01            [ 1]  865 	clr	(0x01, sp)
      0002D3 AE 53 11         [ 2]  866 	ldw	x, #0x5311
      0002D6 F7               [ 1]  867 	ld	(x), a
      0002D7 5B 02            [ 2]  868 	addw	sp, #2
      0002D9 81               [ 4]  869 	ret
                                    870 ;	lcd_n1202_stm8s.c: 7: void lcdn1202_gpio_init()
                                    871 ;	-----------------------------------------
                                    872 ;	 function lcdn1202_gpio_init
                                    873 ;	-----------------------------------------
      0002DA                        874 _lcdn1202_gpio_init:
                                    875 ;	lcd_n1202_stm8s.c: 9: LCDDDR |= (OUTPUT<<LCDDAT)|(OUTPUT<<LCDCLK)|(OUTPUT<<LCDBL);	//Configure GPIO as Output
      0002DA AE 50 02         [ 2]  876 	ldw	x, #0x5002
      0002DD F6               [ 1]  877 	ld	a, (x)
      0002DE AA 0E            [ 1]  878 	or	a, #0x0e
      0002E0 F7               [ 1]  879 	ld	(x), a
                                    880 ;	lcd_n1202_stm8s.c: 10: LCDCR1 |= (pushpull<<LCDDAT)|(pushpull<<LCDCLK)|(pushpull<<LCDBL); //Configure Output Type
      0002E1 AE 50 03         [ 2]  881 	ldw	x, #0x5003
      0002E4 F6               [ 1]  882 	ld	a, (x)
      0002E5 AA 0E            [ 1]  883 	or	a, #0x0e
      0002E7 F7               [ 1]  884 	ld	(x), a
                                    885 ;	lcd_n1202_stm8s.c: 11: LCDCR2 |= (speed_10MHz<<LCDDAT)|(speed_10MHz<<LCDCLK)|(speed_10MHz<<LCDBL); //Configure GPIO speed
      0002E8 AE 50 04         [ 2]  886 	ldw	x, #0x5004
      0002EB F6               [ 1]  887 	ld	a, (x)
      0002EC AA 0E            [ 1]  888 	or	a, #0x0e
      0002EE F7               [ 1]  889 	ld	(x), a
                                    890 ;	lcd_n1202_stm8s.c: 12: LCDODR = 0x00; //Starting value
      0002EF 35 00 50 00      [ 1]  891 	mov	0x5000+0, #0x00
      0002F3 81               [ 4]  892 	ret
                                    893 ;	lcd_n1202_stm8s.c: 15: void lcdn1202_9bsend(unsigned char cdsign, unsigned char comdat)
                                    894 ;	-----------------------------------------
                                    895 ;	 function lcdn1202_9bsend
                                    896 ;	-----------------------------------------
      0002F4                        897 _lcdn1202_9bsend:
      0002F4 88               [ 1]  898 	push	a
                                    899 ;	lcd_n1202_stm8s.c: 19: if(cdsign==0) LCDODR &= LCDDAT_MASKL; //1st bit is 0 for Command
      0002F5 0D 04            [ 1]  900 	tnz	(0x04, sp)
      0002F7 26 09            [ 1]  901 	jrne	00102$
      0002F9 AE 50 00         [ 2]  902 	ldw	x, #0x5000
      0002FC F6               [ 1]  903 	ld	a, (x)
      0002FD A4 FD            [ 1]  904 	and	a, #0xfd
      0002FF F7               [ 1]  905 	ld	(x), a
      000300 20 07            [ 2]  906 	jra	00103$
      000302                        907 00102$:
                                    908 ;	lcd_n1202_stm8s.c: 20: else LCDODR |= LCDDAT_MASKH; //1st bit is 1 for Data
      000302 AE 50 00         [ 2]  909 	ldw	x, #0x5000
      000305 F6               [ 1]  910 	ld	a, (x)
      000306 AA 02            [ 1]  911 	or	a, #0x02
      000308 F7               [ 1]  912 	ld	(x), a
      000309                        913 00103$:
                                    914 ;	lcd_n1202_stm8s.c: 21: lcdn1202_clock1();
      000309 CDr03r38         [ 4]  915 	call	_lcdn1202_clock1
                                    916 ;	lcd_n1202_stm8s.c: 23: for(cdi=0;cdi<8;cdi++) //Send 2nd-9th bit
      00030C 0F 01            [ 1]  917 	clr	(0x01, sp)
      00030E                        918 00108$:
                                    919 ;	lcd_n1202_stm8s.c: 25: if(comdat & 0x80) LCDODR |= LCDDAT_MASKH; //LCDDAT = '1'
      00030E 0D 05            [ 1]  920 	tnz	(0x05, sp)
      000310 2A 09            [ 1]  921 	jrpl	00105$
      000312 AE 50 00         [ 2]  922 	ldw	x, #0x5000
      000315 F6               [ 1]  923 	ld	a, (x)
      000316 AA 02            [ 1]  924 	or	a, #0x02
      000318 F7               [ 1]  925 	ld	(x), a
      000319 20 07            [ 2]  926 	jra	00106$
      00031B                        927 00105$:
                                    928 ;	lcd_n1202_stm8s.c: 26: else LCDODR &= LCDDAT_MASKL;		  //LCDDAT = '0'
      00031B AE 50 00         [ 2]  929 	ldw	x, #0x5000
      00031E F6               [ 1]  930 	ld	a, (x)
      00031F A4 FD            [ 1]  931 	and	a, #0xfd
      000321 F7               [ 1]  932 	ld	(x), a
      000322                        933 00106$:
                                    934 ;	lcd_n1202_stm8s.c: 27: lcdn1202_clock1();
      000322 CDr03r38         [ 4]  935 	call	_lcdn1202_clock1
                                    936 ;	lcd_n1202_stm8s.c: 28: comdat <<= 1; //Shift to next bit
      000325 08 05            [ 1]  937 	sll	(0x05, sp)
                                    938 ;	lcd_n1202_stm8s.c: 23: for(cdi=0;cdi<8;cdi++) //Send 2nd-9th bit
      000327 0C 01            [ 1]  939 	inc	(0x01, sp)
      000329 7B 01            [ 1]  940 	ld	a, (0x01, sp)
      00032B A1 08            [ 1]  941 	cp	a, #0x08
      00032D 25 DF            [ 1]  942 	jrc	00108$
                                    943 ;	lcd_n1202_stm8s.c: 30: LCDODR &= LCDDAT_MASKL;
      00032F AE 50 00         [ 2]  944 	ldw	x, #0x5000
      000332 F6               [ 1]  945 	ld	a, (x)
      000333 A4 FD            [ 1]  946 	and	a, #0xfd
      000335 F7               [ 1]  947 	ld	(x), a
      000336 84               [ 1]  948 	pop	a
      000337 81               [ 4]  949 	ret
                                    950 ;	lcd_n1202_stm8s.c: 33: void lcdn1202_clock1()
                                    951 ;	-----------------------------------------
                                    952 ;	 function lcdn1202_clock1
                                    953 ;	-----------------------------------------
      000338                        954 _lcdn1202_clock1:
                                    955 ;	lcd_n1202_stm8s.c: 35: LCDODR |= LCDCLK_MASKH; //Send 1 pulse to LCDCLK
      000338 AE 50 00         [ 2]  956 	ldw	x, #0x5000
      00033B F6               [ 1]  957 	ld	a, (x)
      00033C AA 04            [ 1]  958 	or	a, #0x04
      00033E F7               [ 1]  959 	ld	(x), a
                                    960 ;	lcd_n1202_stm8s.c: 36: delay_us(1); //Short delay
      00033F 4B 01            [ 1]  961 	push	#0x01
      000341 5F               [ 1]  962 	clrw	x
      000342 89               [ 2]  963 	pushw	x
      000343 4B 00            [ 1]  964 	push	#0x00
      000345 CDr00r05         [ 4]  965 	call	_delay_us
      000348 5B 04            [ 2]  966 	addw	sp, #4
                                    967 ;	lcd_n1202_stm8s.c: 37: LCDODR &= LCDCLK_MASKL;
      00034A AE 50 00         [ 2]  968 	ldw	x, #0x5000
      00034D F6               [ 1]  969 	ld	a, (x)
      00034E A4 FB            [ 1]  970 	and	a, #0xfb
      000350 F7               [ 1]  971 	ld	(x), a
      000351 81               [ 4]  972 	ret
                                    973 ;	lcd_n1202_stm8s.c: 40: void lcdn1202_blon()
                                    974 ;	-----------------------------------------
                                    975 ;	 function lcdn1202_blon
                                    976 ;	-----------------------------------------
      000352                        977 _lcdn1202_blon:
                                    978 ;	lcd_n1202_stm8s.c: 42: LCDODR |= LCDBL_MASKH; //LCDBL = '1'
      000352 AE 50 00         [ 2]  979 	ldw	x, #0x5000
      000355 F6               [ 1]  980 	ld	a, (x)
      000356 AA 08            [ 1]  981 	or	a, #0x08
      000358 F7               [ 1]  982 	ld	(x), a
      000359 81               [ 4]  983 	ret
                                    984 ;	lcd_n1202_stm8s.c: 45: void lcdn1202_bloff()
                                    985 ;	-----------------------------------------
                                    986 ;	 function lcdn1202_bloff
                                    987 ;	-----------------------------------------
      00035A                        988 _lcdn1202_bloff:
                                    989 ;	lcd_n1202_stm8s.c: 47: LCDODR &= LCDBL_MASKL; //LCDBL = '0'
      00035A AE 50 00         [ 2]  990 	ldw	x, #0x5000
      00035D F6               [ 1]  991 	ld	a, (x)
      00035E A4 F7            [ 1]  992 	and	a, #0xf7
      000360 F7               [ 1]  993 	ld	(x), a
      000361 81               [ 4]  994 	ret
                                    995 ;	lcd_n1202.c: 9: void lcdn1202_init()
                                    996 ;	-----------------------------------------
                                    997 ;	 function lcdn1202_init
                                    998 ;	-----------------------------------------
      000362                        999 _lcdn1202_init:
                                   1000 ;	lcd_n1202.c: 11: lcdn1202_gpio_init();
      000362 CDr02rDA         [ 4] 1001 	call	_lcdn1202_gpio_init
                                   1002 ;	lcd_n1202.c: 15: delay_ms(10);
      000365 4B 0A            [ 1] 1003 	push	#0x0a
      000367 5F               [ 1] 1004 	clrw	x
      000368 89               [ 2] 1005 	pushw	x
      000369 4B 00            [ 1] 1006 	push	#0x00
      00036B CDr00r55         [ 4] 1007 	call	_delay_ms
      00036E 5B 04            [ 2] 1008 	addw	sp, #4
                                   1009 ;	lcd_n1202.c: 17: lcdn1202_sendcom(0xE2);	//Soft Reset
      000370 4B E2            [ 1] 1010 	push	#0xe2
      000372 CDr03rAE         [ 4] 1011 	call	_lcdn1202_sendcom
      000375 84               [ 1] 1012 	pop	a
                                   1013 ;	lcd_n1202.c: 18: delay_ms(1);
      000376 4B 01            [ 1] 1014 	push	#0x01
      000378 5F               [ 1] 1015 	clrw	x
      000379 89               [ 2] 1016 	pushw	x
      00037A 4B 00            [ 1] 1017 	push	#0x00
      00037C CDr00r55         [ 4] 1018 	call	_delay_ms
      00037F 5B 04            [ 2] 1019 	addw	sp, #4
                                   1020 ;	lcd_n1202.c: 19: lcdn1202_sendcom(0xA4); //Normal Display Mode
      000381 4B A4            [ 1] 1021 	push	#0xa4
      000383 CDr03rAE         [ 4] 1022 	call	_lcdn1202_sendcom
      000386 84               [ 1] 1023 	pop	a
                                   1024 ;	lcd_n1202.c: 20: lcdn1202_sendcom(0x2F);	//Power Control = Max (Booster On, VReg On, VFol On)
      000387 4B 2F            [ 1] 1025 	push	#0x2f
      000389 CDr03rAE         [ 4] 1026 	call	_lcdn1202_sendcom
      00038C 84               [ 1] 1027 	pop	a
                                   1028 ;	lcd_n1202.c: 22: lcdn1202_sendcom(0xA0); //Segment Driver Direction = Normal (lines start at left)
      00038D 4B A0            [ 1] 1029 	push	#0xa0
      00038F CDr03rAE         [ 4] 1030 	call	_lcdn1202_sendcom
      000392 84               [ 1] 1031 	pop	a
                                   1032 ;	lcd_n1202.c: 23: lcdn1202_sendcom(0xC0); //Common Driver Direction = Normal
      000393 4B C0            [ 1] 1033 	push	#0xc0
      000395 CDr03rAE         [ 4] 1034 	call	_lcdn1202_sendcom
      000398 84               [ 1] 1035 	pop	a
                                   1036 ;	lcd_n1202.c: 24: lcdn1202_sendcom(0x80|16); //Set Contrast to default
      000399 4B 90            [ 1] 1037 	push	#0x90
      00039B CDr03rAE         [ 4] 1038 	call	_lcdn1202_sendcom
      00039E 84               [ 1] 1039 	pop	a
                                   1040 ;	lcd_n1202.c: 26: lcdn1202_sendcom(0xAF);	//Display On
      00039F 4B AF            [ 1] 1041 	push	#0xaf
      0003A1 CDr03rAE         [ 4] 1042 	call	_lcdn1202_sendcom
      0003A4 84               [ 1] 1043 	pop	a
                                   1044 ;	lcd_n1202.c: 28: LCD_BL_OFF(); //Backlight off
      0003A5 CDr05r77         [ 4] 1045 	call	_LCD_BL_OFF
                                   1046 ;	lcd_n1202.c: 29: LCD_clear();  //Clear pixel memory
      0003A8 CDr05r39         [ 4] 1047 	call	_LCD_clear
                                   1048 ;	lcd_n1202.c: 30: LCD_BL_ON();  //Backlight on
      0003AB CCr05r74         [ 2] 1049 	jp	_LCD_BL_ON
                                   1050 ;	lcd_n1202.c: 33: void lcdn1202_sendcom(unsigned char ssd1306com)
                                   1051 ;	-----------------------------------------
                                   1052 ;	 function lcdn1202_sendcom
                                   1053 ;	-----------------------------------------
      0003AE                       1054 _lcdn1202_sendcom:
                                   1055 ;	lcd_n1202.c: 35: lcdn1202_9bsend(0,ssd1306com); //Send Command
      0003AE 7B 03            [ 1] 1056 	ld	a, (0x03, sp)
      0003B0 88               [ 1] 1057 	push	a
      0003B1 4B 00            [ 1] 1058 	push	#0x00
      0003B3 CDr02rF4         [ 4] 1059 	call	_lcdn1202_9bsend
      0003B6 5B 02            [ 2] 1060 	addw	sp, #2
      0003B8 81               [ 4] 1061 	ret
                                   1062 ;	lcd_n1202.c: 38: void lcdn1202_senddat(unsigned char ssd1306dat)
                                   1063 ;	-----------------------------------------
                                   1064 ;	 function lcdn1202_senddat
                                   1065 ;	-----------------------------------------
      0003B9                       1066 _lcdn1202_senddat:
                                   1067 ;	lcd_n1202.c: 40: lcdn1202_9bsend(1,ssd1306dat); //Send Data
      0003B9 7B 03            [ 1] 1068 	ld	a, (0x03, sp)
      0003BB 88               [ 1] 1069 	push	a
      0003BC 4B 01            [ 1] 1070 	push	#0x01
      0003BE CDr02rF4         [ 4] 1071 	call	_lcdn1202_9bsend
      0003C1 5B 02            [ 2] 1072 	addw	sp, #2
      0003C3 81               [ 4] 1073 	ret
                                   1074 ;	lcd_n1202.c: 43: void lcdn1202_setpos(unsigned char row, unsigned char col)
                                   1075 ;	-----------------------------------------
                                   1076 ;	 function lcdn1202_setpos
                                   1077 ;	-----------------------------------------
      0003C4                       1078 _lcdn1202_setpos:
                                   1079 ;	lcd_n1202.c: 45: lcdn1202_sendcom(0xB0|(row&0x0F)); //Set page of row
      0003C4 7B 03            [ 1] 1080 	ld	a, (0x03, sp)
      0003C6 A4 0F            [ 1] 1081 	and	a, #0x0f
      0003C8 AA B0            [ 1] 1082 	or	a, #0xb0
      0003CA 88               [ 1] 1083 	push	a
      0003CB CDr03rAE         [ 4] 1084 	call	_lcdn1202_sendcom
      0003CE 84               [ 1] 1085 	pop	a
                                   1086 ;	lcd_n1202.c: 46: lcdn1202_sendcom(0x00|(col&0x0F)); //Set lower nibble of Column
      0003CF 7B 04            [ 1] 1087 	ld	a, (0x04, sp)
      0003D1 A4 0F            [ 1] 1088 	and	a, #0x0f
      0003D3 88               [ 1] 1089 	push	a
      0003D4 CDr03rAE         [ 4] 1090 	call	_lcdn1202_sendcom
      0003D7 84               [ 1] 1091 	pop	a
                                   1092 ;	lcd_n1202.c: 47: lcdn1202_sendcom(0x10|((col>>4)&0x0F)); //Set upper nibble of Column
      0003D8 7B 04            [ 1] 1093 	ld	a, (0x04, sp)
      0003DA 4E               [ 1] 1094 	swap	a
      0003DB A4 0F            [ 1] 1095 	and	a, #0x0f
      0003DD A4 0F            [ 1] 1096 	and	a, #0x0f
      0003DF AA 10            [ 1] 1097 	or	a, #0x10
      0003E1 88               [ 1] 1098 	push	a
      0003E2 CDr03rAE         [ 4] 1099 	call	_lcdn1202_sendcom
      0003E5 84               [ 1] 1100 	pop	a
      0003E6 81               [ 4] 1101 	ret
                                   1102 ;	lcd_n1202.c: 50: void lcdn1202_clear()
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function lcdn1202_clear
                                   1105 ;	-----------------------------------------
      0003E7                       1106 _lcdn1202_clear:
      0003E7 88               [ 1] 1107 	push	a
                                   1108 ;	lcd_n1202.c: 53: lcdn1202_setpos(0,0);
      0003E8 4B 00            [ 1] 1109 	push	#0x00
      0003EA 4B 00            [ 1] 1110 	push	#0x00
      0003EC CDr03rC4         [ 4] 1111 	call	_lcdn1202_setpos
      0003EF 5B 02            [ 2] 1112 	addw	sp, #2
                                   1113 ;	lcd_n1202.c: 54: for(row=0;row<LCDN1202_ROW;row++)	//Scan rows (pages)
      0003F1 0F 01            [ 1] 1114 	clr	(0x01, sp)
                                   1115 ;	lcd_n1202.c: 56: for(col=0;col<LCDN1202_COL;col++)	//Scan columns
      0003F3                       1116 00109$:
      0003F3 4F               [ 1] 1117 	clr	a
      0003F4                       1118 00103$:
                                   1119 ;	lcd_n1202.c: 58: lcdn1202_senddat(0);	//Send 0 to every pixel
      0003F4 88               [ 1] 1120 	push	a
      0003F5 4B 00            [ 1] 1121 	push	#0x00
      0003F7 CDr03rB9         [ 4] 1122 	call	_lcdn1202_senddat
      0003FA 84               [ 1] 1123 	pop	a
      0003FB 84               [ 1] 1124 	pop	a
                                   1125 ;	lcd_n1202.c: 56: for(col=0;col<LCDN1202_COL;col++)	//Scan columns
      0003FC 4C               [ 1] 1126 	inc	a
      0003FD A1 60            [ 1] 1127 	cp	a, #0x60
      0003FF 25 F3            [ 1] 1128 	jrc	00103$
                                   1129 ;	lcd_n1202.c: 54: for(row=0;row<LCDN1202_ROW;row++)	//Scan rows (pages)
      000401 0C 01            [ 1] 1130 	inc	(0x01, sp)
      000403 7B 01            [ 1] 1131 	ld	a, (0x01, sp)
      000405 A1 09            [ 1] 1132 	cp	a, #0x09
      000407 25 EA            [ 1] 1133 	jrc	00109$
      000409 84               [ 1] 1134 	pop	a
      00040A 81               [ 4] 1135 	ret
                                   1136 ;	lcd_n1202.c: 63: void LCD_setpos(unsigned char row, unsigned char col)
                                   1137 ;	-----------------------------------------
                                   1138 ;	 function LCD_setpos
                                   1139 ;	-----------------------------------------
      00040B                       1140 _LCD_setpos:
                                   1141 ;	lcd_n1202.c: 65: lcdn1202_setpos(row,col); //Set coordinate (for LCD_drawbyte)
      00040B 7B 04            [ 1] 1142 	ld	a, (0x04, sp)
      00040D 88               [ 1] 1143 	push	a
      00040E 7B 04            [ 1] 1144 	ld	a, (0x04, sp)
      000410 88               [ 1] 1145 	push	a
      000411 CDr03rC4         [ 4] 1146 	call	_lcdn1202_setpos
      000414 5B 02            [ 2] 1147 	addw	sp, #2
      000416 81               [ 4] 1148 	ret
                                   1149 ;	lcd_n1202.c: 68: void LCD_drawbyte(unsigned char dbyte)
                                   1150 ;	-----------------------------------------
                                   1151 ;	 function LCD_drawbyte
                                   1152 ;	-----------------------------------------
      000417                       1153 _LCD_drawbyte:
                                   1154 ;	lcd_n1202.c: 70: lcdn1202_senddat(dbyte); //Send 1 byte data only
      000417 7B 03            [ 1] 1155 	ld	a, (0x03, sp)
      000419 88               [ 1] 1156 	push	a
      00041A CDr03rB9         [ 4] 1157 	call	_lcdn1202_senddat
      00041D 84               [ 1] 1158 	pop	a
      00041E 81               [ 4] 1159 	ret
                                   1160 ;	lcd_n1202.c: 73: void LCD_drawchar(unsigned char chr, unsigned char chrrow, unsigned char chrcol)
                                   1161 ;	-----------------------------------------
                                   1162 ;	 function LCD_drawchar
                                   1163 ;	-----------------------------------------
      00041F                       1164 _LCD_drawchar:
      00041F 52 0B            [ 2] 1165 	sub	sp, #11
                                   1166 ;	lcd_n1202.c: 78: lcdn1202_setpos(chrrow,chrcol);
      000421 7B 10            [ 1] 1167 	ld	a, (0x10, sp)
      000423 88               [ 1] 1168 	push	a
      000424 7B 10            [ 1] 1169 	ld	a, (0x10, sp)
      000426 88               [ 1] 1170 	push	a
      000427 CDr03rC4         [ 4] 1171 	call	_lcdn1202_setpos
      00042A 5B 02            [ 2] 1172 	addw	sp, #2
                                   1173 ;	lcd_n1202.c: 83: chridx=(chr-32)*5; //Start at character 32 (Space). 5 columns for each character
      00042C 7B 0E            [ 1] 1174 	ld	a, (0x0e, sp)
      00042E 6B 0B            [ 1] 1175 	ld	(0x0b, sp), a
      000430 0F 0A            [ 1] 1176 	clr	(0x0a, sp)
                                   1177 ;	lcd_n1202.c: 80: if((chr>31)&&(chr<128))	//Alphanumeric & Punctuation Area
      000432 7B 0E            [ 1] 1178 	ld	a, (0x0e, sp)
      000434 A1 1F            [ 1] 1179 	cp	a, #0x1f
      000436 23 3F            [ 2] 1180 	jrule	00107$
      000438 7B 0E            [ 1] 1181 	ld	a, (0x0e, sp)
      00043A A1 80            [ 1] 1182 	cp	a, #0x80
      00043C 24 39            [ 1] 1183 	jrnc	00107$
                                   1184 ;	lcd_n1202.c: 82: lcdn1202_senddat(0x00);
      00043E 4B 00            [ 1] 1185 	push	#0x00
      000440 CDr03rB9         [ 4] 1186 	call	_lcdn1202_senddat
      000443 84               [ 1] 1187 	pop	a
                                   1188 ;	lcd_n1202.c: 83: chridx=(chr-32)*5; //Start at character 32 (Space). 5 columns for each character
      000444 1E 0A            [ 2] 1189 	ldw	x, (0x0a, sp)
      000446 1D 00 20         [ 2] 1190 	subw	x, #0x0020
      000449 89               [ 2] 1191 	pushw	x
      00044A 4B 05            [ 1] 1192 	push	#0x05
      00044C 4B 00            [ 1] 1193 	push	#0x00
      00044E CDr00r00         [ 4] 1194 	call	__mulint
      000451 5B 04            [ 2] 1195 	addw	sp, #4
      000453 1F 08            [ 2] 1196 	ldw	(0x08, sp), x
                                   1197 ;	lcd_n1202.c: 84: for(ci=0;ci<5;ci++)
      000455 AEr08r5F         [ 2] 1198 	ldw	x, #_font_arr+0
      000458 1F 06            [ 2] 1199 	ldw	(0x06, sp), x
      00045A 4F               [ 1] 1200 	clr	a
      00045B                       1201 00110$:
                                   1202 ;	lcd_n1202.c: 86: fchar = font_arr[chridx+ci]; //Get character pattern from Font Array
      00045B 5F               [ 1] 1203 	clrw	x
      00045C 97               [ 1] 1204 	ld	xl, a
      00045D 72 FB 08         [ 2] 1205 	addw	x, (0x08, sp)
      000460 72 FB 06         [ 2] 1206 	addw	x, (0x06, sp)
      000463 88               [ 1] 1207 	push	a
      000464 F6               [ 1] 1208 	ld	a, (x)
      000465 97               [ 1] 1209 	ld	xl, a
      000466 84               [ 1] 1210 	pop	a
                                   1211 ;	lcd_n1202.c: 87: lcdn1202_senddat(fchar); //Send pattern 1 byte at a time
      000467 88               [ 1] 1212 	push	a
      000468 89               [ 2] 1213 	pushw	x
      000469 5B 01            [ 2] 1214 	addw	sp, #1
      00046B CDr03rB9         [ 4] 1215 	call	_lcdn1202_senddat
      00046E 84               [ 1] 1216 	pop	a
      00046F 84               [ 1] 1217 	pop	a
                                   1218 ;	lcd_n1202.c: 84: for(ci=0;ci<5;ci++)
      000470 4C               [ 1] 1219 	inc	a
      000471 A1 05            [ 1] 1220 	cp	a, #0x05
      000473 25 E6            [ 1] 1221 	jrc	00110$
      000475 20 39            [ 2] 1222 	jra	00114$
      000477                       1223 00107$:
                                   1224 ;	lcd_n1202.c: 90: else if((chr>127)&&(chr<148))	//Frame & Arrow Area
      000477 7B 0E            [ 1] 1225 	ld	a, (0x0e, sp)
      000479 A1 7F            [ 1] 1226 	cp	a, #0x7f
      00047B 23 33            [ 2] 1227 	jrule	00114$
      00047D 7B 0E            [ 1] 1228 	ld	a, (0x0e, sp)
      00047F A1 94            [ 1] 1229 	cp	a, #0x94
      000481 24 2D            [ 1] 1230 	jrnc	00114$
                                   1231 ;	lcd_n1202.c: 92: chridx=(chr-128)*8; //Start at index 128. 5 columns for each symbol
      000483 1E 0A            [ 2] 1232 	ldw	x, (0x0a, sp)
      000485 1D 00 80         [ 2] 1233 	subw	x, #0x0080
      000488 58               [ 2] 1234 	sllw	x
      000489 58               [ 2] 1235 	sllw	x
      00048A 58               [ 2] 1236 	sllw	x
                                   1237 ;	lcd_n1202.c: 93: for(ci=0;ci<8;ci++)
      00048B 90 AEr08r5F      [ 2] 1238 	ldw	y, #_font_arr+0
      00048F 17 04            [ 2] 1239 	ldw	(0x04, sp), y
      000491 1C 01 E0         [ 2] 1240 	addw	x, #0x01e0
      000494 1F 02            [ 2] 1241 	ldw	(0x02, sp), x
      000496 0F 01            [ 1] 1242 	clr	(0x01, sp)
      000498                       1243 00112$:
                                   1244 ;	lcd_n1202.c: 95: fchar = font_arr[chridx+480+ci]; //Get symbol pattern from Font Array
      000498 5F               [ 1] 1245 	clrw	x
      000499 7B 01            [ 1] 1246 	ld	a, (0x01, sp)
      00049B 97               [ 1] 1247 	ld	xl, a
      00049C 72 FB 02         [ 2] 1248 	addw	x, (0x02, sp)
      00049F 72 FB 04         [ 2] 1249 	addw	x, (0x04, sp)
      0004A2 F6               [ 1] 1250 	ld	a, (x)
                                   1251 ;	lcd_n1202.c: 96: lcdn1202_senddat(fchar); //Send pattern 1 byte at a time
      0004A3 88               [ 1] 1252 	push	a
      0004A4 CDr03rB9         [ 4] 1253 	call	_lcdn1202_senddat
      0004A7 84               [ 1] 1254 	pop	a
                                   1255 ;	lcd_n1202.c: 93: for(ci=0;ci<8;ci++)
      0004A8 0C 01            [ 1] 1256 	inc	(0x01, sp)
      0004AA 7B 01            [ 1] 1257 	ld	a, (0x01, sp)
      0004AC A1 08            [ 1] 1258 	cp	a, #0x08
      0004AE 25 E8            [ 1] 1259 	jrc	00112$
      0004B0                       1260 00114$:
      0004B0 5B 0B            [ 2] 1261 	addw	sp, #11
      0004B2 81               [ 4] 1262 	ret
                                   1263 ;	lcd_n1202.c: 102: void LCD_drawtext(char *text, unsigned char txtrow, unsigned char txtcol)
                                   1264 ;	-----------------------------------------
                                   1265 ;	 function LCD_drawtext
                                   1266 ;	-----------------------------------------
      0004B3                       1267 _LCD_drawtext:
      0004B3 52 02            [ 2] 1268 	sub	sp, #2
                                   1269 ;	lcd_n1202.c: 106: while(text[stridx] != 0) //Scan characters in string
      0004B5 5F               [ 1] 1270 	clrw	x
      0004B6 1F 01            [ 2] 1271 	ldw	(0x01, sp), x
      0004B8                       1272 00101$:
      0004B8 1E 05            [ 2] 1273 	ldw	x, (0x05, sp)
      0004BA 72 FB 01         [ 2] 1274 	addw	x, (0x01, sp)
      0004BD F6               [ 1] 1275 	ld	a, (x)
      0004BE 97               [ 1] 1276 	ld	xl, a
      0004BF 4D               [ 1] 1277 	tnz	a
      0004C0 27 19            [ 1] 1278 	jreq	00104$
                                   1279 ;	lcd_n1202.c: 108: LCD_drawchar(text[stridx],txtrow,txtcol+(8*stridx)); //Display each character
      0004C2 7B 02            [ 1] 1280 	ld	a, (0x02, sp)
      0004C4 48               [ 1] 1281 	sll	a
      0004C5 48               [ 1] 1282 	sll	a
      0004C6 48               [ 1] 1283 	sll	a
      0004C7 1B 08            [ 1] 1284 	add	a, (0x08, sp)
      0004C9 88               [ 1] 1285 	push	a
      0004CA 7B 08            [ 1] 1286 	ld	a, (0x08, sp)
      0004CC 88               [ 1] 1287 	push	a
      0004CD 9F               [ 1] 1288 	ld	a, xl
      0004CE 88               [ 1] 1289 	push	a
      0004CF CDr04r1F         [ 4] 1290 	call	_LCD_drawchar
      0004D2 5B 03            [ 2] 1291 	addw	sp, #3
                                   1292 ;	lcd_n1202.c: 109: stridx++;
      0004D4 1E 01            [ 2] 1293 	ldw	x, (0x01, sp)
      0004D6 5C               [ 2] 1294 	incw	x
      0004D7 1F 01            [ 2] 1295 	ldw	(0x01, sp), x
      0004D9 20 DD            [ 2] 1296 	jra	00101$
      0004DB                       1297 00104$:
      0004DB 5B 02            [ 2] 1298 	addw	sp, #2
      0004DD 81               [ 4] 1299 	ret
                                   1300 ;	lcd_n1202.c: 113: void LCD_drawint(unsigned int num, unsigned char numrow, unsigned char numcol)
                                   1301 ;	-----------------------------------------
                                   1302 ;	 function LCD_drawint
                                   1303 ;	-----------------------------------------
      0004DE                       1304 _LCD_drawint:
      0004DE 52 0C            [ 2] 1305 	sub	sp, #12
                                   1306 ;	lcd_n1202.c: 121: numb = num;
      0004E0 1E 0F            [ 2] 1307 	ldw	x, (0x0f, sp)
                                   1308 ;	lcd_n1202.c: 122: while(numb!=0) //Counting digit
      0004E2 4F               [ 1] 1309 	clr	a
      0004E3                       1310 00101$:
      0004E3 5D               [ 2] 1311 	tnzw	x
      0004E4 27 08            [ 1] 1312 	jreq	00114$
                                   1313 ;	lcd_n1202.c: 124: ndigit++;
      0004E6 4C               [ 1] 1314 	inc	a
                                   1315 ;	lcd_n1202.c: 125: numb /= 10; 
      0004E7 90 AE 00 0A      [ 2] 1316 	ldw	y, #0x000a
      0004EB 65               [ 2] 1317 	divw	x, y
      0004EC 20 F5            [ 2] 1318 	jra	00101$
      0004EE                       1319 00114$:
      0004EE 6B 0A            [ 1] 1320 	ld	(0x0a, sp), a
                                   1321 ;	lcd_n1202.c: 127: for(nd=0;nd<ndigit;nd++) //Converting each digit
      0004F0 4F               [ 1] 1322 	clr	a
      0004F1 96               [ 1] 1323 	ldw	x, sp
      0004F2 1C 00 03         [ 2] 1324 	addw	x, #3
      0004F5 1F 0B            [ 2] 1325 	ldw	(0x0b, sp), x
      0004F7                       1326 00106$:
      0004F7 11 0A            [ 1] 1327 	cp	a, (0x0a, sp)
      0004F9 24 27            [ 1] 1328 	jrnc	00104$
                                   1329 ;	lcd_n1202.c: 129: numb = num%10;
      0004FB 1E 0F            [ 2] 1330 	ldw	x, (0x0f, sp)
      0004FD 90 AE 00 0A      [ 2] 1331 	ldw	y, #0x000a
      000501 65               [ 2] 1332 	divw	x, y
      000502 17 01            [ 2] 1333 	ldw	(0x01, sp), y
                                   1334 ;	lcd_n1202.c: 130: num = num/10;
      000504 1E 0F            [ 2] 1335 	ldw	x, (0x0f, sp)
      000506 90 AE 00 0A      [ 2] 1336 	ldw	y, #0x000a
      00050A 65               [ 2] 1337 	divw	x, y
      00050B 1F 0F            [ 2] 1338 	ldw	(0x0f, sp), x
                                   1339 ;	lcd_n1202.c: 131: ibuff[ndigit-(nd+1)] = numb + '0'; //Start from last_index-1
      00050D 4C               [ 1] 1340 	inc	a
      00050E 6B 09            [ 1] 1341 	ld	(0x09, sp), a
      000510 7B 0A            [ 1] 1342 	ld	a, (0x0a, sp)
      000512 10 09            [ 1] 1343 	sub	a, (0x09, sp)
      000514 5F               [ 1] 1344 	clrw	x
      000515 97               [ 1] 1345 	ld	xl, a
      000516 72 FB 0B         [ 2] 1346 	addw	x, (0x0b, sp)
      000519 7B 02            [ 1] 1347 	ld	a, (0x02, sp)
      00051B AB 30            [ 1] 1348 	add	a, #0x30
      00051D F7               [ 1] 1349 	ld	(x), a
                                   1350 ;	lcd_n1202.c: 127: for(nd=0;nd<ndigit;nd++) //Converting each digit
      00051E 7B 09            [ 1] 1351 	ld	a, (0x09, sp)
      000520 20 D5            [ 2] 1352 	jra	00106$
      000522                       1353 00104$:
                                   1354 ;	lcd_n1202.c: 133: ibuff[ndigit] = '\0'; //Last character is null
      000522 5F               [ 1] 1355 	clrw	x
      000523 7B 0A            [ 1] 1356 	ld	a, (0x0a, sp)
      000525 97               [ 1] 1357 	ld	xl, a
      000526 72 FB 0B         [ 2] 1358 	addw	x, (0x0b, sp)
      000529 7F               [ 1] 1359 	clr	(x)
                                   1360 ;	lcd_n1202.c: 135: LCD_drawtext(ibuff,numrow,numcol); //Display number as text
      00052A 1E 0B            [ 2] 1361 	ldw	x, (0x0b, sp)
      00052C 7B 12            [ 1] 1362 	ld	a, (0x12, sp)
      00052E 88               [ 1] 1363 	push	a
      00052F 7B 12            [ 1] 1364 	ld	a, (0x12, sp)
      000531 88               [ 1] 1365 	push	a
      000532 89               [ 2] 1366 	pushw	x
      000533 CDr04rB3         [ 4] 1367 	call	_LCD_drawtext
      000536 5B 10            [ 2] 1368 	addw	sp, #16
      000538 81               [ 4] 1369 	ret
                                   1370 ;	lcd_n1202.c: 138: void LCD_clear()
                                   1371 ;	-----------------------------------------
                                   1372 ;	 function LCD_clear
                                   1373 ;	-----------------------------------------
      000539                       1374 _LCD_clear:
                                   1375 ;	lcd_n1202.c: 140: lcdn1202_sendcom(0xAE);  //Set Display off
      000539 4B AE            [ 1] 1376 	push	#0xae
      00053B CDr03rAE         [ 4] 1377 	call	_lcdn1202_sendcom
      00053E 84               [ 1] 1378 	pop	a
                                   1379 ;	lcd_n1202.c: 141: lcdn1202_clear(); //Clear display
      00053F CDr03rE7         [ 4] 1380 	call	_lcdn1202_clear
                                   1381 ;	lcd_n1202.c: 142: lcdn1202_sendcom(0xAF); //Set Display on
      000542 4B AF            [ 1] 1382 	push	#0xaf
      000544 CDr03rAE         [ 4] 1383 	call	_lcdn1202_sendcom
      000547 84               [ 1] 1384 	pop	a
      000548 81               [ 4] 1385 	ret
                                   1386 ;	lcd_n1202.c: 145: void LCD_clearblock(unsigned char row, unsigned char col_start, unsigned char col_fin)
                                   1387 ;	-----------------------------------------
                                   1388 ;	 function LCD_clearblock
                                   1389 ;	-----------------------------------------
      000549                       1390 _LCD_clearblock:
                                   1391 ;	lcd_n1202.c: 149: lcdn1202_setpos(row,col_start); //Set start position
      000549 7B 04            [ 1] 1392 	ld	a, (0x04, sp)
      00054B 88               [ 1] 1393 	push	a
      00054C 7B 04            [ 1] 1394 	ld	a, (0x04, sp)
      00054E 88               [ 1] 1395 	push	a
      00054F CDr03rC4         [ 4] 1396 	call	_lcdn1202_setpos
      000552 5B 02            [ 2] 1397 	addw	sp, #2
                                   1398 ;	lcd_n1202.c: 150: for(col=col_start;col<=col_fin;col++) //Scan columns
      000554 7B 04            [ 1] 1399 	ld	a, (0x04, sp)
      000556                       1400 00103$:
      000556 11 05            [ 1] 1401 	cp	a, (0x05, sp)
      000558 22 0B            [ 1] 1402 	jrugt	00105$
                                   1403 ;	lcd_n1202.c: 152: lcdn1202_senddat(0);	//Send 0 to every pixel in a column
      00055A 88               [ 1] 1404 	push	a
      00055B 4B 00            [ 1] 1405 	push	#0x00
      00055D CDr03rB9         [ 4] 1406 	call	_lcdn1202_senddat
      000560 84               [ 1] 1407 	pop	a
      000561 84               [ 1] 1408 	pop	a
                                   1409 ;	lcd_n1202.c: 150: for(col=col_start;col<=col_fin;col++) //Scan columns
      000562 4C               [ 1] 1410 	inc	a
      000563 20 F1            [ 2] 1411 	jra	00103$
      000565                       1412 00105$:
      000565 81               [ 4] 1413 	ret
                                   1414 ;	lcd_n1202.c: 156: void LCD_normal()
                                   1415 ;	-----------------------------------------
                                   1416 ;	 function LCD_normal
                                   1417 ;	-----------------------------------------
      000566                       1418 _LCD_normal:
                                   1419 ;	lcd_n1202.c: 158: lcdn1202_sendcom(0xA6);	//Black Pixel in White Background
      000566 4B A6            [ 1] 1420 	push	#0xa6
      000568 CDr03rAE         [ 4] 1421 	call	_lcdn1202_sendcom
      00056B 84               [ 1] 1422 	pop	a
      00056C 81               [ 4] 1423 	ret
                                   1424 ;	lcd_n1202.c: 161: void LCD_reverse()
                                   1425 ;	-----------------------------------------
                                   1426 ;	 function LCD_reverse
                                   1427 ;	-----------------------------------------
      00056D                       1428 _LCD_reverse:
                                   1429 ;	lcd_n1202.c: 163: lcdn1202_sendcom(0xA7);	//White Pixel in Black Background
      00056D 4B A7            [ 1] 1430 	push	#0xa7
      00056F CDr03rAE         [ 4] 1431 	call	_lcdn1202_sendcom
      000572 84               [ 1] 1432 	pop	a
      000573 81               [ 4] 1433 	ret
                                   1434 ;	lcd_n1202.c: 166: void LCD_BL_ON()
                                   1435 ;	-----------------------------------------
                                   1436 ;	 function LCD_BL_ON
                                   1437 ;	-----------------------------------------
      000574                       1438 _LCD_BL_ON:
                                   1439 ;	lcd_n1202.c: 168: lcdn1202_blon(); //Backlight on
      000574 CCr03r52         [ 2] 1440 	jp	_lcdn1202_blon
                                   1441 ;	lcd_n1202.c: 171: void LCD_BL_OFF()
                                   1442 ;	-----------------------------------------
                                   1443 ;	 function LCD_BL_OFF
                                   1444 ;	-----------------------------------------
      000577                       1445 _LCD_BL_OFF:
                                   1446 ;	lcd_n1202.c: 173: lcdn1202_bloff(); //Backlight off
      000577 CCr03r5A         [ 2] 1447 	jp	_lcdn1202_bloff
                                   1448 ;	powerman.c: 6: void powerman_init() //GPIOs Initialization 
                                   1449 ;	-----------------------------------------
                                   1450 ;	 function powerman_init
                                   1451 ;	-----------------------------------------
      00057A                       1452 _powerman_init:
                                   1453 ;	powerman.c: 8: POWLATCHDDR |= (OUTPUT<<POW_LATCH);
      00057A AE 50 16         [ 2] 1454 	ldw	x, #0x5016
      00057D F6               [ 1] 1455 	ld	a, (x)
      00057E AA 20            [ 1] 1456 	or	a, #0x20
      000580 F7               [ 1] 1457 	ld	(x), a
                                   1458 ;	powerman.c: 9: POWLATCHCR1 |= (pushpull<<POW_LATCH);
      000581 AE 50 17         [ 2] 1459 	ldw	x, #0x5017
      000584 F6               [ 1] 1460 	ld	a, (x)
      000585 AA 20            [ 1] 1461 	or	a, #0x20
      000587 F7               [ 1] 1462 	ld	(x), a
                                   1463 ;	powerman.c: 10: POWLATCHCR2 |= (speed_2MHz<<POW_LATCH);
      000588 AE 50 18         [ 2] 1464 	ldw	x, #0x5018
      00058B F6               [ 1] 1465 	ld	a, (x)
      00058C AE 50 18         [ 2] 1466 	ldw	x, #0x5018
      00058F F7               [ 1] 1467 	ld	(x), a
                                   1468 ;	powerman.c: 12: POWDETDDR |= (INPUT<<POW_DET);
      000590 AE 50 1B         [ 2] 1469 	ldw	x, #0x501b
      000593 F6               [ 1] 1470 	ld	a, (x)
      000594 AE 50 1B         [ 2] 1471 	ldw	x, #0x501b
      000597 F7               [ 1] 1472 	ld	(x), a
                                   1473 ;	powerman.c: 13: POWDETCR1 |= (floating<<POW_DET);
      000598 AE 50 1C         [ 2] 1474 	ldw	x, #0x501c
      00059B F6               [ 1] 1475 	ld	a, (x)
      00059C AE 50 1C         [ 2] 1476 	ldw	x, #0x501c
      00059F F7               [ 1] 1477 	ld	(x), a
                                   1478 ;	powerman.c: 14: POWDETCR2 |= (exti_disabled<<POW_DET);
      0005A0 AE 50 1D         [ 2] 1479 	ldw	x, #0x501d
      0005A3 F6               [ 1] 1480 	ld	a, (x)
      0005A4 AE 50 1D         [ 2] 1481 	ldw	x, #0x501d
      0005A7 F7               [ 1] 1482 	ld	(x), a
                                   1483 ;	powerman.c: 16: CHGDDR |= (INPUT<<CHG_PR) | (INPUT<<CHG_FL);
      0005A8 AE 50 07         [ 2] 1484 	ldw	x, #0x5007
      0005AB F6               [ 1] 1485 	ld	a, (x)
      0005AC AE 50 07         [ 2] 1486 	ldw	x, #0x5007
      0005AF F7               [ 1] 1487 	ld	(x), a
                                   1488 ;	powerman.c: 17: CHGCR1 |= (pullup<<CHG_PR) | (pullup<<CHG_FL);
      0005B0 AE 50 08         [ 2] 1489 	ldw	x, #0x5008
      0005B3 F6               [ 1] 1490 	ld	a, (x)
      0005B4 AA C0            [ 1] 1491 	or	a, #0xc0
      0005B6 F7               [ 1] 1492 	ld	(x), a
                                   1493 ;	powerman.c: 18: CHGCR2 |= (exti_disabled<<CHG_PR) | (exti_disabled<<CHG_FL);
      0005B7 AE 50 09         [ 2] 1494 	ldw	x, #0x5009
      0005BA F6               [ 1] 1495 	ld	a, (x)
      0005BB AE 50 09         [ 2] 1496 	ldw	x, #0x5009
      0005BE F7               [ 1] 1497 	ld	(x), a
      0005BF 81               [ 4] 1498 	ret
                                   1499 ;	powerman.c: 21: void Power_Latch() //Activate Power-Latch : latch Power-Switch transistor
                                   1500 ;	-----------------------------------------
                                   1501 ;	 function Power_Latch
                                   1502 ;	-----------------------------------------
      0005C0                       1503 _Power_Latch:
                                   1504 ;	powerman.c: 23: POWLATCHODR |= POWLATCH_MASKH; //POWER-LATCH = 1
      0005C0 AE 50 14         [ 2] 1505 	ldw	x, #0x5014
      0005C3 F6               [ 1] 1506 	ld	a, (x)
      0005C4 AA 20            [ 1] 1507 	or	a, #0x20
      0005C6 F7               [ 1] 1508 	ld	(x), a
      0005C7 81               [ 4] 1509 	ret
                                   1510 ;	powerman.c: 26: void Power_Unlatch() //Release Power-Latch : unlatch Power-Switch transistor
                                   1511 ;	-----------------------------------------
                                   1512 ;	 function Power_Unlatch
                                   1513 ;	-----------------------------------------
      0005C8                       1514 _Power_Unlatch:
                                   1515 ;	powerman.c: 28: POWLATCHODR &= POWLATCH_MASKL; //POWER-LATCH = 0
      0005C8 AE 50 14         [ 2] 1516 	ldw	x, #0x5014
      0005CB F6               [ 1] 1517 	ld	a, (x)
      0005CC A4 DF            [ 1] 1518 	and	a, #0xdf
      0005CE F7               [ 1] 1519 	ld	(x), a
      0005CF 81               [ 4] 1520 	ret
                                   1521 ;	powerman.c: 31: unsigned char read_pkey() //Check Powerkey State
                                   1522 ;	-----------------------------------------
                                   1523 ;	 function read_pkey
                                   1524 ;	-----------------------------------------
      0005D0                       1525 _read_pkey:
                                   1526 ;	powerman.c: 35: pkeyval = POWDETIDR & POWDET_MASKH; //Read POWER-DETECT state
      0005D0 AE 50 1A         [ 2] 1527 	ldw	x, #0x501a
      0005D3 F6               [ 1] 1528 	ld	a, (x)
      0005D4 A4 10            [ 1] 1529 	and	a, #0x10
                                   1530 ;	powerman.c: 37: return pkeyval;
      0005D6 81               [ 4] 1531 	ret
                                   1532 ;	powerman.c: 40: unsigned int vbat_mon() //Battery Voltage reading
                                   1533 ;	-----------------------------------------
                                   1534 ;	 function vbat_mon
                                   1535 ;	-----------------------------------------
      0005D7                       1536 _vbat_mon:
                                   1537 ;	powerman.c: 47: vbat = read_adc(BAT_LVL)*66/40*3; //VADC_MAX=3333mV,VBAT_MAX=5000mV
      0005D7 4B 03            [ 1] 1538 	push	#0x03
      0005D9 CDr01r85         [ 4] 1539 	call	_read_adc
      0005DC 84               [ 1] 1540 	pop	a
      0005DD 89               [ 2] 1541 	pushw	x
      0005DE 4B 42            [ 1] 1542 	push	#0x42
      0005E0 4B 00            [ 1] 1543 	push	#0x00
      0005E2 CDr00r00         [ 4] 1544 	call	__mulint
      0005E5 5B 04            [ 2] 1545 	addw	sp, #4
      0005E7 90 AE 00 28      [ 2] 1546 	ldw	y, #0x0028
      0005EB 65               [ 2] 1547 	divw	x, y
      0005EC 89               [ 2] 1548 	pushw	x
      0005ED 4B 03            [ 1] 1549 	push	#0x03
      0005EF 4B 00            [ 1] 1550 	push	#0x00
      0005F1 CDr00r00         [ 4] 1551 	call	__mulint
      0005F4 5B 04            [ 2] 1552 	addw	sp, #4
                                   1553 ;	powerman.c: 49: return vbat;
      0005F6 81               [ 4] 1554 	ret
                                   1555 ;	powerman.c: 52: unsigned char chgst_mon() //Charging Status reading
                                   1556 ;	-----------------------------------------
                                   1557 ;	 function chgst_mon
                                   1558 ;	-----------------------------------------
      0005F7                       1559 _chgst_mon:
                                   1560 ;	powerman.c: 57: chgst = CHGIDR & CHGST_MASKH; //Check CHG-PR & CHG-FL
      0005F7 AE 50 06         [ 2] 1561 	ldw	x, #0x5006
      0005FA F6               [ 1] 1562 	ld	a, (x)
      0005FB A4 C0            [ 1] 1563 	and	a, #0xc0
                                   1564 ;	powerman.c: 59: return chgst;
      0005FD 81               [ 4] 1565 	ret
                                   1566 ;	main.c: 40: int main()
                                   1567 ;	-----------------------------------------
                                   1568 ;	 function main
                                   1569 ;	-----------------------------------------
      0005FE                       1570 _main:
                                   1571 ;	main.c: 43: clock_init();
      0005FE CDr00rAF         [ 4] 1572 	call	_clock_init
                                   1573 ;	main.c: 44: delay_init();
      000601 CDr00r00         [ 4] 1574 	call	_delay_init
                                   1575 ;	main.c: 45: powerman_init();
      000604 CDr05r7A         [ 4] 1576 	call	_powerman_init
                                   1577 ;	main.c: 46: adc_init();
      000607 CDr01r78         [ 4] 1578 	call	_adc_init
                                   1579 ;	main.c: 47: lcdn1202_init();
      00060A CDr03r62         [ 4] 1580 	call	_lcdn1202_init
                                   1581 ;	main.c: 48: LCD_clear();
      00060D CDr05r39         [ 4] 1582 	call	_LCD_clear
                                   1583 ;	main.c: 51: pkeylock = 1; //lock powerkey for next press/click
      000610 35 01u00u02      [ 1] 1584 	mov	_pkeylock+0, #0x01
                                   1585 ;	main.c: 52: chg_disp = 0; //Charging Status & Battery Voltage is not displayed
      000614 72 5Fu00u04      [ 1] 1586 	clr	_chg_disp+0
                                   1587 ;	main.c: 55: pkeyp = read_pkey(); //check if Powerkey is pressed
      000618 CDr05rD0         [ 4] 1588 	call	_read_pkey
                                   1589 ;	main.c: 56: if(pkeyp==POWKEY_PRESSED) Page_Main(); //if pressed then Power-On Mode, go to Main Page
      00061B C7u00u01         [ 1] 1590 	ld	_pkeyp+0, a
      00061E A1 10            [ 1] 1591 	cp	a, #0x10
      000620 26 05            [ 1] 1592 	jrne	00102$
      000622 CDr06rA0         [ 4] 1593 	call	_Page_Main
      000625 20 03            [ 2] 1594 	jra	00103$
      000627                       1595 00102$:
                                   1596 ;	main.c: 57: else Page_Charging(); //if not pressed then Charging Mode, go to Charging Page
      000627 CDr06r74         [ 4] 1597 	call	_Page_Charging
      00062A                       1598 00103$:
                                   1599 ;	main.c: 59: loop();
      00062A CDr06r2F         [ 4] 1600 	call	_loop
                                   1601 ;	main.c: 60: return 0;
      00062D 5F               [ 1] 1602 	clrw	x
      00062E 81               [ 4] 1603 	ret
                                   1604 ;	main.c: 66: void loop()
                                   1605 ;	-----------------------------------------
                                   1606 ;	 function loop
                                   1607 ;	-----------------------------------------
      00062F                       1608 _loop:
                                   1609 ;	main.c: 69: ktime = 0; //start Long-Press counter with 0
      00062F 72 5Fu00u05      [ 1] 1610 	clr	_ktime+0
                                   1611 ;	main.c: 71: while(1)
      000633                       1612 00111$:
                                   1613 ;	main.c: 73: if((read_pkey()==0)&&(pkeylock!=0)) pkeylock = 0; //unlock Powerkey from Long-Press
      000633 CDr05rD0         [ 4] 1614 	call	_read_pkey
      000636 4D               [ 1] 1615 	tnz	a
      000637 26 0A            [ 1] 1616 	jrne	00107$
      000639 72 5Du00u02      [ 1] 1617 	tnz	_pkeylock+0
      00063D 27 04            [ 1] 1618 	jreq	00107$
      00063F 72 5Fu00u02      [ 1] 1619 	clr	_pkeylock+0
                                   1620 ;	main.c: 76: while((read_pkey()!=POWKEY_UNPRESSED)&&(pkeylock==0)) //check if Powerkey is pressed and unlocked
      000643                       1621 00107$:
      000643 CDr05rD0         [ 4] 1622 	call	_read_pkey
      000646 4D               [ 1] 1623 	tnz	a
      000647 27 22            [ 1] 1624 	jreq	00109$
      000649 72 5Du00u02      [ 1] 1625 	tnz	_pkeylock+0
      00064D 26 1C            [ 1] 1626 	jrne	00109$
                                   1627 ;	main.c: 78: pkeyp = read_pkey();
      00064F CDr05rD0         [ 4] 1628 	call	_read_pkey
      000652 C7u00u01         [ 1] 1629 	ld	_pkeyp+0, a
                                   1630 ;	main.c: 79: delay_ms(KDELAY); //Anti-Bouncing delay
      000655 4B 14            [ 1] 1631 	push	#0x14
      000657 5F               [ 1] 1632 	clrw	x
      000658 89               [ 2] 1633 	pushw	x
      000659 4B 00            [ 1] 1634 	push	#0x00
      00065B CDr00r55         [ 4] 1635 	call	_delay_ms
      00065E 5B 04            [ 2] 1636 	addw	sp, #4
                                   1637 ;	main.c: 80: ktime++; //increment Long-Press counter
      000660 C6u00u05         [ 1] 1638 	ld	a, _ktime+0
      000663 4C               [ 1] 1639 	inc	a
                                   1640 ;	main.c: 81: if(ktime>KLONGP) break; //detect Long-Press
      000664 C7u00u05         [ 1] 1641 	ld	_ktime+0, a
      000667 A1 64            [ 1] 1642 	cp	a, #0x64
      000669 23 D8            [ 2] 1643 	jrule	00107$
      00066B                       1644 00109$:
                                   1645 ;	main.c: 83: update_pkey(); //Execute Action for Powerkey
      00066B CDr06rDA         [ 4] 1646 	call	_update_pkey
                                   1647 ;	main.c: 85: disp_bat_status(); //Display Battery Status
      00066E CDr07rD5         [ 4] 1648 	call	_disp_bat_status
      000671 20 C0            [ 2] 1649 	jra	00111$
      000673 81               [ 4] 1650 	ret
                                   1651 ;	main.c: 94: void Page_Charging() //Charging Mode
                                   1652 ;	-----------------------------------------
                                   1653 ;	 function Page_Charging
                                   1654 ;	-----------------------------------------
      000674                       1655 _Page_Charging:
                                   1656 ;	main.c: 96: page_id = 0; //Charging Page ID
      000674 72 5Fu00u03      [ 1] 1657 	clr	_page_id+0
                                   1658 ;	main.c: 97: LCD_clear();
      000678 CDr05r39         [ 4] 1659 	call	_LCD_clear
                                   1660 ;	main.c: 99: chg_disp = 1; //Charging Status displayed
      00067B 35 01u00u04      [ 1] 1661 	mov	_chg_disp+0, #0x01
                                   1662 ;	main.c: 100: LCD_drawtext("CHARGING",2,16);
      00067F AEr0ArDF         [ 2] 1663 	ldw	x, #___str_0+0
      000682 4B 10            [ 1] 1664 	push	#0x10
      000684 4B 02            [ 1] 1665 	push	#0x02
      000686 89               [ 2] 1666 	pushw	x
      000687 CDr04rB3         [ 4] 1667 	call	_LCD_drawtext
      00068A 5B 04            [ 2] 1668 	addw	sp, #4
                                   1669 ;	main.c: 101: delay_ms(2000); //disable Powerkey for a while
      00068C 4B D0            [ 1] 1670 	push	#0xd0
      00068E 4B 07            [ 1] 1671 	push	#0x07
      000690 5F               [ 1] 1672 	clrw	x
      000691 89               [ 2] 1673 	pushw	x
      000692 CDr00r55         [ 4] 1674 	call	_delay_ms
      000695 5B 04            [ 2] 1675 	addw	sp, #4
                                   1676 ;	main.c: 102: pkeyp = 0; //reset Powerkey flag
      000697 72 5Fu00u01      [ 1] 1677 	clr	_pkeyp+0
                                   1678 ;	main.c: 103: scf = 1; //default toggle state of Single Click in Charging Mode
      00069B 35 01u00u06      [ 1] 1679 	mov	_scf+0, #0x01
      00069F 81               [ 4] 1680 	ret
                                   1681 ;	main.c: 106: void Page_Main() //Power-On Mode
                                   1682 ;	-----------------------------------------
                                   1683 ;	 function Page_Main
                                   1684 ;	-----------------------------------------
      0006A0                       1685 _Page_Main:
                                   1686 ;	main.c: 108: page_id = 1; //Power-On Page ID
      0006A0 35 01u00u03      [ 1] 1687 	mov	_page_id+0, #0x01
                                   1688 ;	main.c: 109: Power_Latch(); //activate Power-Latch
      0006A4 CDr05rC0         [ 4] 1689 	call	_Power_Latch
                                   1690 ;	main.c: 110: LCD_clear();
      0006A7 CDr05r39         [ 4] 1691 	call	_LCD_clear
                                   1692 ;	main.c: 112: chg_disp = 0; //Charging Status not displayed
      0006AA 72 5Fu00u04      [ 1] 1693 	clr	_chg_disp+0
                                   1694 ;	main.c: 113: LCD_drawtext("POWER ON",2,16);
      0006AE AEr0ArE8         [ 2] 1695 	ldw	x, #___str_1+0
      0006B1 4B 10            [ 1] 1696 	push	#0x10
      0006B3 4B 02            [ 1] 1697 	push	#0x02
      0006B5 89               [ 2] 1698 	pushw	x
      0006B6 CDr04rB3         [ 4] 1699 	call	_LCD_drawtext
      0006B9 5B 04            [ 2] 1700 	addw	sp, #4
                                   1701 ;	main.c: 114: delay_ms(2000); //disable Powerkey for a while
      0006BB 4B D0            [ 1] 1702 	push	#0xd0
      0006BD 4B 07            [ 1] 1703 	push	#0x07
      0006BF 5F               [ 1] 1704 	clrw	x
      0006C0 89               [ 2] 1705 	pushw	x
      0006C1 CDr00r55         [ 4] 1706 	call	_delay_ms
      0006C4 5B 04            [ 2] 1707 	addw	sp, #4
                                   1708 ;	main.c: 115: LCD_clearblock(2,16,79);
      0006C6 4B 4F            [ 1] 1709 	push	#0x4f
      0006C8 4B 10            [ 1] 1710 	push	#0x10
      0006CA 4B 02            [ 1] 1711 	push	#0x02
      0006CC CDr05r49         [ 4] 1712 	call	_LCD_clearblock
      0006CF 5B 03            [ 2] 1713 	addw	sp, #3
                                   1714 ;	main.c: 116: pkeyp = 0; //reset Powerkey flag
      0006D1 72 5Fu00u01      [ 1] 1715 	clr	_pkeyp+0
                                   1716 ;	main.c: 117: scf = 1; //default toggle state of Single Click in Power-On Mode
      0006D5 35 01u00u06      [ 1] 1717 	mov	_scf+0, #0x01
      0006D9 81               [ 4] 1718 	ret
                                   1719 ;	main.c: 123: void update_pkey() //Action options for Powerkey
                                   1720 ;	-----------------------------------------
                                   1721 ;	 function update_pkey
                                   1722 ;	-----------------------------------------
      0006DA                       1723 _update_pkey:
      0006DA 52 02            [ 2] 1724 	sub	sp, #2
                                   1725 ;	main.c: 125: if((pkeyp==POWKEY_PRESSED)&&(page_id==1)&&(ktime>KLONGP)) //Long-Press in Power-On Mode
      0006DC C6u00u01         [ 1] 1726 	ld	a, _pkeyp+0
      0006DF A1 10            [ 1] 1727 	cp	a, #0x10
      0006E1 26 06            [ 1] 1728 	jrne	00171$
      0006E3 A6 01            [ 1] 1729 	ld	a, #0x01
      0006E5 6B 02            [ 1] 1730 	ld	(0x02, sp), a
      0006E7 20 02            [ 2] 1731 	jra	00172$
      0006E9                       1732 00171$:
      0006E9 0F 02            [ 1] 1733 	clr	(0x02, sp)
      0006EB                       1734 00172$:
      0006EB C6u00u03         [ 1] 1735 	ld	a, _page_id+0
      0006EE A1 01            [ 1] 1736 	cp	a, #0x01
      0006F0 26 06            [ 1] 1737 	jrne	00174$
      0006F2 A6 01            [ 1] 1738 	ld	a, #0x01
      0006F4 6B 01            [ 1] 1739 	ld	(0x01, sp), a
      0006F6 20 02            [ 2] 1740 	jra	00175$
      0006F8                       1741 00174$:
      0006F8 0F 01            [ 1] 1742 	clr	(0x01, sp)
      0006FA                       1743 00175$:
      0006FA C6u00u05         [ 1] 1744 	ld	a, _ktime+0
      0006FD A1 64            [ 1] 1745 	cp	a, #0x64
      0006FF 22 03            [ 1] 1746 	jrugt	00176$
      000701 4F               [ 1] 1747 	clr	a
      000702 20 02            [ 2] 1748 	jra	00177$
      000704                       1749 00176$:
      000704 A6 01            [ 1] 1750 	ld	a, #0x01
      000706                       1751 00177$:
      000706 0D 02            [ 1] 1752 	tnz	(0x02, sp)
      000708 27 32            [ 1] 1753 	jreq	00116$
      00070A 0D 01            [ 1] 1754 	tnz	(0x01, sp)
      00070C 27 2E            [ 1] 1755 	jreq	00116$
      00070E 4D               [ 1] 1756 	tnz	a
      00070F 27 2B            [ 1] 1757 	jreq	00116$
                                   1758 ;	main.c: 127: pkeyp = 0; //reset Powerkey value
      000711 72 5Fu00u01      [ 1] 1759 	clr	_pkeyp+0
                                   1760 ;	main.c: 128: pkeylock = 1; //lock Powerkey for next press/click
      000715 35 01u00u02      [ 1] 1761 	mov	_pkeylock+0, #0x01
                                   1762 ;	main.c: 129: Power_Unlatch(); //release Power-Latch
      000719 CDr05rC8         [ 4] 1763 	call	_Power_Unlatch
                                   1764 ;	main.c: 130: LCD_clear();
      00071C CDr05r39         [ 4] 1765 	call	_LCD_clear
                                   1766 ;	main.c: 131: LCD_drawtext("POWR OFF",2,16);
      00071F AEr0ArF1         [ 2] 1767 	ldw	x, #___str_2+0
      000722 4B 10            [ 1] 1768 	push	#0x10
      000724 4B 02            [ 1] 1769 	push	#0x02
      000726 89               [ 2] 1770 	pushw	x
      000727 CDr04rB3         [ 4] 1771 	call	_LCD_drawtext
      00072A 5B 04            [ 2] 1772 	addw	sp, #4
                                   1773 ;	main.c: 132: delay_ms(2000); //make sure Page_Charging is not pop-up after Power-Off
      00072C 4B D0            [ 1] 1774 	push	#0xd0
      00072E 4B 07            [ 1] 1775 	push	#0x07
      000730 5F               [ 1] 1776 	clrw	x
      000731 89               [ 2] 1777 	pushw	x
      000732 CDr00r55         [ 4] 1778 	call	_delay_ms
      000735 5B 04            [ 2] 1779 	addw	sp, #4
                                   1780 ;	main.c: 133: Page_Charging(); //change to Charging Mode
      000737 CDr06r74         [ 4] 1781 	call	_Page_Charging
      00073A 20 42            [ 2] 1782 	jra	00117$
      00073C                       1783 00116$:
                                   1784 ;	main.c: 135: else if((pkeyp==POWKEY_PRESSED)&&(page_id==1)&&(ktime<=KLONGP)) //Single-Click in Power-On Mode
      00073C 0D 02            [ 1] 1785 	tnz	(0x02, sp)
      00073E 27 10            [ 1] 1786 	jreq	00111$
      000740 0D 01            [ 1] 1787 	tnz	(0x01, sp)
      000742 27 0C            [ 1] 1788 	jreq	00111$
      000744 4D               [ 1] 1789 	tnz	a
      000745 26 09            [ 1] 1790 	jrne	00111$
                                   1791 ;	main.c: 137: pkeyp = 0; //reset Powerkey value
      000747 72 5Fu00u01      [ 1] 1792 	clr	_pkeyp+0
                                   1793 ;	main.c: 138: on_single_click();
      00074B CDr07r85         [ 4] 1794 	call	_on_single_click
      00074E 20 2E            [ 2] 1795 	jra	00117$
      000750                       1796 00111$:
                                   1797 ;	main.c: 141: else if((pkeyp==POWKEY_PRESSED)&&(page_id==0)&&(ktime>KLONGP)) //Long-Press in Charging Mode
      000750 0D 02            [ 1] 1798 	tnz	(0x02, sp)
      000752 27 16            [ 1] 1799 	jreq	00106$
      000754 72 5Du00u03      [ 1] 1800 	tnz	_page_id+0
      000758 26 10            [ 1] 1801 	jrne	00106$
      00075A 4D               [ 1] 1802 	tnz	a
      00075B 27 0D            [ 1] 1803 	jreq	00106$
                                   1804 ;	main.c: 143: pkeyp = 0; //reset Powerkey value
      00075D 72 5Fu00u01      [ 1] 1805 	clr	_pkeyp+0
                                   1806 ;	main.c: 144: pkeylock = 1; //lock Powerkey for next press/click
      000761 35 01u00u02      [ 1] 1807 	mov	_pkeylock+0, #0x01
                                   1808 ;	main.c: 145: Page_Main(); //change to Power-On Mode
      000765 CDr06rA0         [ 4] 1809 	call	_Page_Main
      000768 20 14            [ 2] 1810 	jra	00117$
      00076A                       1811 00106$:
                                   1812 ;	main.c: 147: else if((pkeyp==POWKEY_PRESSED)&&(page_id==0)&&(ktime<=KLONGP)) //Single-Click in Charging Mode
      00076A 0D 02            [ 1] 1813 	tnz	(0x02, sp)
      00076C 27 10            [ 1] 1814 	jreq	00117$
      00076E 72 5Du00u03      [ 1] 1815 	tnz	_page_id+0
      000772 26 0A            [ 1] 1816 	jrne	00117$
      000774 4D               [ 1] 1817 	tnz	a
      000775 26 07            [ 1] 1818 	jrne	00117$
                                   1819 ;	main.c: 149: pkeyp = 0; //reset Powerkey value
      000777 72 5Fu00u01      [ 1] 1820 	clr	_pkeyp+0
                                   1821 ;	main.c: 150: chg_single_click();
      00077B CDr07rA3         [ 4] 1822 	call	_chg_single_click
      00077E                       1823 00117$:
                                   1824 ;	main.c: 153: ktime = 0;
      00077E 72 5Fu00u05      [ 1] 1825 	clr	_ktime+0
      000782 5B 02            [ 2] 1826 	addw	sp, #2
      000784 81               [ 4] 1827 	ret
                                   1828 ;	main.c: 159: void on_single_click() //Single-Click action on Power-On Mode
                                   1829 ;	-----------------------------------------
                                   1830 ;	 function on_single_click
                                   1831 ;	-----------------------------------------
      000785                       1832 _on_single_click:
                                   1833 ;	main.c: 161: if(scf==0)
      000785 72 5Du00u06      [ 1] 1834 	tnz	_scf+0
      000789 26 09            [ 1] 1835 	jrne	00104$
                                   1836 ;	main.c: 163: LCD_BL_ON(); //Backlight On
      00078B CDr05r74         [ 4] 1837 	call	_LCD_BL_ON
                                   1838 ;	main.c: 164: scf = 1;
      00078E 35 01u00u06      [ 1] 1839 	mov	_scf+0, #0x01
      000792 20 0E            [ 2] 1840 	jra	00106$
      000794                       1841 00104$:
                                   1842 ;	main.c: 166: else if(scf==1)
      000794 C6u00u06         [ 1] 1843 	ld	a, _scf+0
      000797 A1 01            [ 1] 1844 	cp	a, #0x01
      000799 26 07            [ 1] 1845 	jrne	00106$
                                   1846 ;	main.c: 168: LCD_BL_OFF(); //Backlight Off
      00079B CDr05r77         [ 4] 1847 	call	_LCD_BL_OFF
                                   1848 ;	main.c: 169: scf = 0;
      00079E 72 5Fu00u06      [ 1] 1849 	clr	_scf+0
      0007A2                       1850 00106$:
      0007A2 81               [ 4] 1851 	ret
                                   1852 ;	main.c: 174: void chg_single_click() //Single-Click action on Charging Mode
                                   1853 ;	-----------------------------------------
                                   1854 ;	 function chg_single_click
                                   1855 ;	-----------------------------------------
      0007A3                       1856 _chg_single_click:
                                   1857 ;	main.c: 176: if(scf==0)
      0007A3 72 5Du00u06      [ 1] 1858 	tnz	_scf+0
      0007A7 26 13            [ 1] 1859 	jrne	00104$
                                   1860 ;	main.c: 178: LCD_drawtext("        ",4,16); //Clear text
      0007A9 AEr0ArFA         [ 2] 1861 	ldw	x, #___str_3+0
      0007AC 4B 10            [ 1] 1862 	push	#0x10
      0007AE 4B 04            [ 1] 1863 	push	#0x04
      0007B0 89               [ 2] 1864 	pushw	x
      0007B1 CDr04rB3         [ 4] 1865 	call	_LCD_drawtext
      0007B4 5B 04            [ 2] 1866 	addw	sp, #4
                                   1867 ;	main.c: 179: scf = 1;
      0007B6 35 01u00u06      [ 1] 1868 	mov	_scf+0, #0x01
      0007BA 20 18            [ 2] 1869 	jra	00106$
      0007BC                       1870 00104$:
                                   1871 ;	main.c: 181: else if(scf==1)
      0007BC C6u00u06         [ 1] 1872 	ld	a, _scf+0
      0007BF A1 01            [ 1] 1873 	cp	a, #0x01
      0007C1 26 11            [ 1] 1874 	jrne	00106$
                                   1875 ;	main.c: 183: LCD_drawtext("bonusoid",4,16); //Display text
      0007C3 AEr0Br03         [ 2] 1876 	ldw	x, #___str_4+0
      0007C6 4B 10            [ 1] 1877 	push	#0x10
      0007C8 4B 04            [ 1] 1878 	push	#0x04
      0007CA 89               [ 2] 1879 	pushw	x
      0007CB CDr04rB3         [ 4] 1880 	call	_LCD_drawtext
      0007CE 5B 04            [ 2] 1881 	addw	sp, #4
                                   1882 ;	main.c: 184: scf = 0;
      0007D0 72 5Fu00u06      [ 1] 1883 	clr	_scf+0
      0007D4                       1884 00106$:
      0007D4 81               [ 4] 1885 	ret
                                   1886 ;	main.c: 192: void disp_bat_status()
                                   1887 ;	-----------------------------------------
                                   1888 ;	 function disp_bat_status
                                   1889 ;	-----------------------------------------
      0007D5                       1890 _disp_bat_status:
                                   1891 ;	main.c: 195: chgst = chgst_mon();
      0007D5 CDr05rF7         [ 4] 1892 	call	_chgst_mon
                                   1893 ;	main.c: 197: if(chgst==CHG_PROGRESS) LCD_drawtext("BCHRG",0,0);
      0007D8 C7u00u09         [ 1] 1894 	ld	_chgst+0, a
      0007DB A1 80            [ 1] 1895 	cp	a, #0x80
      0007DD 26 0F            [ 1] 1896 	jrne	00111$
      0007DF AEr0Br0C         [ 2] 1897 	ldw	x, #___str_5+0
      0007E2 4B 00            [ 1] 1898 	push	#0x00
      0007E4 4B 00            [ 1] 1899 	push	#0x00
      0007E6 89               [ 2] 1900 	pushw	x
      0007E7 CDr04rB3         [ 4] 1901 	call	_LCD_drawtext
      0007EA 5B 04            [ 2] 1902 	addw	sp, #4
      0007EC 20 4E            [ 2] 1903 	jra	00112$
      0007EE                       1904 00111$:
                                   1905 ;	main.c: 198: else if(chgst==CHG_FULL) LCD_drawtext("BFULL",0,0);
      0007EE C6u00u09         [ 1] 1906 	ld	a, _chgst+0
      0007F1 A1 40            [ 1] 1907 	cp	a, #0x40
      0007F3 26 0F            [ 1] 1908 	jrne	00108$
      0007F5 AEr0Br12         [ 2] 1909 	ldw	x, #___str_6+0
      0007F8 4B 00            [ 1] 1910 	push	#0x00
      0007FA 4B 00            [ 1] 1911 	push	#0x00
      0007FC 89               [ 2] 1912 	pushw	x
      0007FD CDr04rB3         [ 4] 1913 	call	_LCD_drawtext
      000800 5B 04            [ 2] 1914 	addw	sp, #4
      000802 20 38            [ 2] 1915 	jra	00112$
      000804                       1916 00108$:
                                   1917 ;	main.c: 199: else if(chgst==CHG_NOCHG) LCD_drawtext("NOCHG",0,0);
      000804 C6u00u09         [ 1] 1918 	ld	a, _chgst+0
      000807 A1 C0            [ 1] 1919 	cp	a, #0xc0
      000809 26 0F            [ 1] 1920 	jrne	00105$
      00080B AEr0Br18         [ 2] 1921 	ldw	x, #___str_7+0
      00080E 4B 00            [ 1] 1922 	push	#0x00
      000810 4B 00            [ 1] 1923 	push	#0x00
      000812 89               [ 2] 1924 	pushw	x
      000813 CDr04rB3         [ 4] 1925 	call	_LCD_drawtext
      000816 5B 04            [ 2] 1926 	addw	sp, #4
      000818 20 22            [ 2] 1927 	jra	00112$
      00081A                       1928 00105$:
                                   1929 ;	main.c: 200: else if(chgst==CHG_NOBAT) LCD_drawtext("NOBAT",0,0);
      00081A 72 5Du00u09      [ 1] 1930 	tnz	_chgst+0
      00081E 26 0F            [ 1] 1931 	jrne	00102$
      000820 AEr0Br1E         [ 2] 1932 	ldw	x, #___str_8+0
      000823 4B 00            [ 1] 1933 	push	#0x00
      000825 4B 00            [ 1] 1934 	push	#0x00
      000827 89               [ 2] 1935 	pushw	x
      000828 CDr04rB3         [ 4] 1936 	call	_LCD_drawtext
      00082B 5B 04            [ 2] 1937 	addw	sp, #4
      00082D 20 0D            [ 2] 1938 	jra	00112$
      00082F                       1939 00102$:
                                   1940 ;	main.c: 201: else LCD_drawtext("UNKWN",0,0);
      00082F AEr0Br24         [ 2] 1941 	ldw	x, #___str_9+0
      000832 4B 00            [ 1] 1942 	push	#0x00
      000834 4B 00            [ 1] 1943 	push	#0x00
      000836 89               [ 2] 1944 	pushw	x
      000837 CDr04rB3         [ 4] 1945 	call	_LCD_drawtext
      00083A 5B 04            [ 2] 1946 	addw	sp, #4
      00083C                       1947 00112$:
                                   1948 ;	main.c: 204: LCD_drawtext("mV",0,80);
      00083C AEr0Br2A         [ 2] 1949 	ldw	x, #___str_10+0
      00083F 4B 50            [ 1] 1950 	push	#0x50
      000841 4B 00            [ 1] 1951 	push	#0x00
      000843 89               [ 2] 1952 	pushw	x
      000844 CDr04rB3         [ 4] 1953 	call	_LCD_drawtext
      000847 5B 04            [ 2] 1954 	addw	sp, #4
                                   1955 ;	main.c: 205: vbat = vbat_mon();
      000849 CDr05rD7         [ 4] 1956 	call	_vbat_mon
      00084C CFu00u07         [ 2] 1957 	ldw	_vbat+0, x
                                   1958 ;	main.c: 206: LCD_drawint(vbat,0,48);
      00084F 4B 30            [ 1] 1959 	push	#0x30
      000851 4B 00            [ 1] 1960 	push	#0x00
      000853 3Bu00u08         [ 1] 1961 	push	_vbat+1
      000856 3Bu00u07         [ 1] 1962 	push	_vbat+0
      000859 CDr04rDE         [ 4] 1963 	call	_LCD_drawint
      00085C 5B 04            [ 2] 1964 	addw	sp, #4
      00085E 81               [ 4] 1965 	ret
                                   1966 	.area CODE
      00085F                       1967 _font_arr:
      00085F 00                    1968 	.db #0x00	; 0
      000860 00                    1969 	.db #0x00	; 0
      000861 00                    1970 	.db #0x00	; 0
      000862 00                    1971 	.db #0x00	; 0
      000863 00                    1972 	.db #0x00	; 0
      000864 00                    1973 	.db #0x00	; 0
      000865 00                    1974 	.db #0x00	; 0
      000866 5F                    1975 	.db #0x5F	; 95
      000867 00                    1976 	.db #0x00	; 0
      000868 00                    1977 	.db #0x00	; 0
      000869 05                    1978 	.db #0x05	; 5
      00086A 03                    1979 	.db #0x03	; 3
      00086B 00                    1980 	.db #0x00	; 0
      00086C 05                    1981 	.db #0x05	; 5
      00086D 03                    1982 	.db #0x03	; 3
      00086E 14                    1983 	.db #0x14	; 20
      00086F 7F                    1984 	.db #0x7F	; 127
      000870 14                    1985 	.db #0x14	; 20
      000871 7F                    1986 	.db #0x7F	; 127
      000872 14                    1987 	.db #0x14	; 20
      000873 24                    1988 	.db #0x24	; 36
      000874 2A                    1989 	.db #0x2A	; 42
      000875 7F                    1990 	.db #0x7F	; 127
      000876 2A                    1991 	.db #0x2A	; 42
      000877 12                    1992 	.db #0x12	; 18
      000878 23                    1993 	.db #0x23	; 35
      000879 13                    1994 	.db #0x13	; 19
      00087A 08                    1995 	.db #0x08	; 8
      00087B 64                    1996 	.db #0x64	; 100	'd'
      00087C 62                    1997 	.db #0x62	; 98	'b'
      00087D 36                    1998 	.db #0x36	; 54	'6'
      00087E 49                    1999 	.db #0x49	; 73	'I'
      00087F 55                    2000 	.db #0x55	; 85	'U'
      000880 22                    2001 	.db #0x22	; 34
      000881 50                    2002 	.db #0x50	; 80	'P'
      000882 00                    2003 	.db #0x00	; 0
      000883 05                    2004 	.db #0x05	; 5
      000884 03                    2005 	.db #0x03	; 3
      000885 00                    2006 	.db #0x00	; 0
      000886 00                    2007 	.db #0x00	; 0
      000887 00                    2008 	.db #0x00	; 0
      000888 1C                    2009 	.db #0x1C	; 28
      000889 22                    2010 	.db #0x22	; 34
      00088A 41                    2011 	.db #0x41	; 65	'A'
      00088B 00                    2012 	.db #0x00	; 0
      00088C 00                    2013 	.db #0x00	; 0
      00088D 41                    2014 	.db #0x41	; 65	'A'
      00088E 22                    2015 	.db #0x22	; 34
      00088F 1C                    2016 	.db #0x1C	; 28
      000890 00                    2017 	.db #0x00	; 0
      000891 0A                    2018 	.db #0x0A	; 10
      000892 04                    2019 	.db #0x04	; 4
      000893 1F                    2020 	.db #0x1F	; 31
      000894 04                    2021 	.db #0x04	; 4
      000895 0A                    2022 	.db #0x0A	; 10
      000896 08                    2023 	.db #0x08	; 8
      000897 08                    2024 	.db #0x08	; 8
      000898 3E                    2025 	.db #0x3E	; 62
      000899 08                    2026 	.db #0x08	; 8
      00089A 08                    2027 	.db #0x08	; 8
      00089B 00                    2028 	.db #0x00	; 0
      00089C 50                    2029 	.db #0x50	; 80	'P'
      00089D 30                    2030 	.db #0x30	; 48	'0'
      00089E 00                    2031 	.db #0x00	; 0
      00089F 00                    2032 	.db #0x00	; 0
      0008A0 08                    2033 	.db #0x08	; 8
      0008A1 08                    2034 	.db #0x08	; 8
      0008A2 08                    2035 	.db #0x08	; 8
      0008A3 08                    2036 	.db #0x08	; 8
      0008A4 08                    2037 	.db #0x08	; 8
      0008A5 00                    2038 	.db #0x00	; 0
      0008A6 60                    2039 	.db #0x60	; 96
      0008A7 60                    2040 	.db #0x60	; 96
      0008A8 00                    2041 	.db #0x00	; 0
      0008A9 00                    2042 	.db #0x00	; 0
      0008AA 20                    2043 	.db #0x20	; 32
      0008AB 10                    2044 	.db #0x10	; 16
      0008AC 08                    2045 	.db #0x08	; 8
      0008AD 04                    2046 	.db #0x04	; 4
      0008AE 02                    2047 	.db #0x02	; 2
      0008AF 3E                    2048 	.db #0x3E	; 62
      0008B0 51                    2049 	.db #0x51	; 81	'Q'
      0008B1 49                    2050 	.db #0x49	; 73	'I'
      0008B2 45                    2051 	.db #0x45	; 69	'E'
      0008B3 3E                    2052 	.db #0x3E	; 62
      0008B4 00                    2053 	.db #0x00	; 0
      0008B5 42                    2054 	.db #0x42	; 66	'B'
      0008B6 7F                    2055 	.db #0x7F	; 127
      0008B7 40                    2056 	.db #0x40	; 64
      0008B8 00                    2057 	.db #0x00	; 0
      0008B9 42                    2058 	.db #0x42	; 66	'B'
      0008BA 61                    2059 	.db #0x61	; 97	'a'
      0008BB 51                    2060 	.db #0x51	; 81	'Q'
      0008BC 49                    2061 	.db #0x49	; 73	'I'
      0008BD 46                    2062 	.db #0x46	; 70	'F'
      0008BE 22                    2063 	.db #0x22	; 34
      0008BF 41                    2064 	.db #0x41	; 65	'A'
      0008C0 49                    2065 	.db #0x49	; 73	'I'
      0008C1 49                    2066 	.db #0x49	; 73	'I'
      0008C2 36                    2067 	.db #0x36	; 54	'6'
      0008C3 18                    2068 	.db #0x18	; 24
      0008C4 14                    2069 	.db #0x14	; 20
      0008C5 12                    2070 	.db #0x12	; 18
      0008C6 7F                    2071 	.db #0x7F	; 127
      0008C7 10                    2072 	.db #0x10	; 16
      0008C8 27                    2073 	.db #0x27	; 39
      0008C9 45                    2074 	.db #0x45	; 69	'E'
      0008CA 45                    2075 	.db #0x45	; 69	'E'
      0008CB 45                    2076 	.db #0x45	; 69	'E'
      0008CC 39                    2077 	.db #0x39	; 57	'9'
      0008CD 3E                    2078 	.db #0x3E	; 62
      0008CE 49                    2079 	.db #0x49	; 73	'I'
      0008CF 49                    2080 	.db #0x49	; 73	'I'
      0008D0 49                    2081 	.db #0x49	; 73	'I'
      0008D1 32                    2082 	.db #0x32	; 50	'2'
      0008D2 61                    2083 	.db #0x61	; 97	'a'
      0008D3 11                    2084 	.db #0x11	; 17
      0008D4 09                    2085 	.db #0x09	; 9
      0008D5 05                    2086 	.db #0x05	; 5
      0008D6 03                    2087 	.db #0x03	; 3
      0008D7 36                    2088 	.db #0x36	; 54	'6'
      0008D8 49                    2089 	.db #0x49	; 73	'I'
      0008D9 49                    2090 	.db #0x49	; 73	'I'
      0008DA 49                    2091 	.db #0x49	; 73	'I'
      0008DB 36                    2092 	.db #0x36	; 54	'6'
      0008DC 26                    2093 	.db #0x26	; 38
      0008DD 49                    2094 	.db #0x49	; 73	'I'
      0008DE 49                    2095 	.db #0x49	; 73	'I'
      0008DF 49                    2096 	.db #0x49	; 73	'I'
      0008E0 3E                    2097 	.db #0x3E	; 62
      0008E1 00                    2098 	.db #0x00	; 0
      0008E2 36                    2099 	.db #0x36	; 54	'6'
      0008E3 36                    2100 	.db #0x36	; 54	'6'
      0008E4 00                    2101 	.db #0x00	; 0
      0008E5 00                    2102 	.db #0x00	; 0
      0008E6 00                    2103 	.db #0x00	; 0
      0008E7 56                    2104 	.db #0x56	; 86	'V'
      0008E8 36                    2105 	.db #0x36	; 54	'6'
      0008E9 00                    2106 	.db #0x00	; 0
      0008EA 00                    2107 	.db #0x00	; 0
      0008EB 00                    2108 	.db #0x00	; 0
      0008EC 08                    2109 	.db #0x08	; 8
      0008ED 14                    2110 	.db #0x14	; 20
      0008EE 22                    2111 	.db #0x22	; 34
      0008EF 00                    2112 	.db #0x00	; 0
      0008F0 14                    2113 	.db #0x14	; 20
      0008F1 14                    2114 	.db #0x14	; 20
      0008F2 14                    2115 	.db #0x14	; 20
      0008F3 14                    2116 	.db #0x14	; 20
      0008F4 14                    2117 	.db #0x14	; 20
      0008F5 00                    2118 	.db #0x00	; 0
      0008F6 22                    2119 	.db #0x22	; 34
      0008F7 14                    2120 	.db #0x14	; 20
      0008F8 08                    2121 	.db #0x08	; 8
      0008F9 00                    2122 	.db #0x00	; 0
      0008FA 02                    2123 	.db #0x02	; 2
      0008FB 01                    2124 	.db #0x01	; 1
      0008FC 51                    2125 	.db #0x51	; 81	'Q'
      0008FD 09                    2126 	.db #0x09	; 9
      0008FE 06                    2127 	.db #0x06	; 6
      0008FF 32                    2128 	.db #0x32	; 50	'2'
      000900 49                    2129 	.db #0x49	; 73	'I'
      000901 79                    2130 	.db #0x79	; 121	'y'
      000902 41                    2131 	.db #0x41	; 65	'A'
      000903 3E                    2132 	.db #0x3E	; 62
      000904 7C                    2133 	.db #0x7C	; 124
      000905 12                    2134 	.db #0x12	; 18
      000906 11                    2135 	.db #0x11	; 17
      000907 12                    2136 	.db #0x12	; 18
      000908 7C                    2137 	.db #0x7C	; 124
      000909 7F                    2138 	.db #0x7F	; 127
      00090A 49                    2139 	.db #0x49	; 73	'I'
      00090B 49                    2140 	.db #0x49	; 73	'I'
      00090C 49                    2141 	.db #0x49	; 73	'I'
      00090D 36                    2142 	.db #0x36	; 54	'6'
      00090E 3E                    2143 	.db #0x3E	; 62
      00090F 41                    2144 	.db #0x41	; 65	'A'
      000910 41                    2145 	.db #0x41	; 65	'A'
      000911 41                    2146 	.db #0x41	; 65	'A'
      000912 22                    2147 	.db #0x22	; 34
      000913 7F                    2148 	.db #0x7F	; 127
      000914 41                    2149 	.db #0x41	; 65	'A'
      000915 41                    2150 	.db #0x41	; 65	'A'
      000916 22                    2151 	.db #0x22	; 34
      000917 1C                    2152 	.db #0x1C	; 28
      000918 7F                    2153 	.db #0x7F	; 127
      000919 49                    2154 	.db #0x49	; 73	'I'
      00091A 49                    2155 	.db #0x49	; 73	'I'
      00091B 49                    2156 	.db #0x49	; 73	'I'
      00091C 49                    2157 	.db #0x49	; 73	'I'
      00091D 7F                    2158 	.db #0x7F	; 127
      00091E 09                    2159 	.db #0x09	; 9
      00091F 09                    2160 	.db #0x09	; 9
      000920 09                    2161 	.db #0x09	; 9
      000921 09                    2162 	.db #0x09	; 9
      000922 3E                    2163 	.db #0x3E	; 62
      000923 41                    2164 	.db #0x41	; 65	'A'
      000924 49                    2165 	.db #0x49	; 73	'I'
      000925 49                    2166 	.db #0x49	; 73	'I'
      000926 3A                    2167 	.db #0x3A	; 58
      000927 7F                    2168 	.db #0x7F	; 127
      000928 08                    2169 	.db #0x08	; 8
      000929 08                    2170 	.db #0x08	; 8
      00092A 08                    2171 	.db #0x08	; 8
      00092B 7F                    2172 	.db #0x7F	; 127
      00092C 00                    2173 	.db #0x00	; 0
      00092D 41                    2174 	.db #0x41	; 65	'A'
      00092E 7F                    2175 	.db #0x7F	; 127
      00092F 41                    2176 	.db #0x41	; 65	'A'
      000930 00                    2177 	.db #0x00	; 0
      000931 20                    2178 	.db #0x20	; 32
      000932 40                    2179 	.db #0x40	; 64
      000933 41                    2180 	.db #0x41	; 65	'A'
      000934 3F                    2181 	.db #0x3F	; 63
      000935 01                    2182 	.db #0x01	; 1
      000936 7F                    2183 	.db #0x7F	; 127
      000937 08                    2184 	.db #0x08	; 8
      000938 14                    2185 	.db #0x14	; 20
      000939 22                    2186 	.db #0x22	; 34
      00093A 41                    2187 	.db #0x41	; 65	'A'
      00093B 7F                    2188 	.db #0x7F	; 127
      00093C 40                    2189 	.db #0x40	; 64
      00093D 40                    2190 	.db #0x40	; 64
      00093E 40                    2191 	.db #0x40	; 64
      00093F 40                    2192 	.db #0x40	; 64
      000940 7F                    2193 	.db #0x7F	; 127
      000941 02                    2194 	.db #0x02	; 2
      000942 0C                    2195 	.db #0x0C	; 12
      000943 02                    2196 	.db #0x02	; 2
      000944 7F                    2197 	.db #0x7F	; 127
      000945 7F                    2198 	.db #0x7F	; 127
      000946 04                    2199 	.db #0x04	; 4
      000947 08                    2200 	.db #0x08	; 8
      000948 10                    2201 	.db #0x10	; 16
      000949 7F                    2202 	.db #0x7F	; 127
      00094A 3E                    2203 	.db #0x3E	; 62
      00094B 41                    2204 	.db #0x41	; 65	'A'
      00094C 41                    2205 	.db #0x41	; 65	'A'
      00094D 41                    2206 	.db #0x41	; 65	'A'
      00094E 3E                    2207 	.db #0x3E	; 62
      00094F 7F                    2208 	.db #0x7F	; 127
      000950 09                    2209 	.db #0x09	; 9
      000951 09                    2210 	.db #0x09	; 9
      000952 09                    2211 	.db #0x09	; 9
      000953 06                    2212 	.db #0x06	; 6
      000954 3E                    2213 	.db #0x3E	; 62
      000955 41                    2214 	.db #0x41	; 65	'A'
      000956 51                    2215 	.db #0x51	; 81	'Q'
      000957 21                    2216 	.db #0x21	; 33
      000958 5E                    2217 	.db #0x5E	; 94
      000959 7F                    2218 	.db #0x7F	; 127
      00095A 09                    2219 	.db #0x09	; 9
      00095B 19                    2220 	.db #0x19	; 25
      00095C 29                    2221 	.db #0x29	; 41
      00095D 46                    2222 	.db #0x46	; 70	'F'
      00095E 26                    2223 	.db #0x26	; 38
      00095F 49                    2224 	.db #0x49	; 73	'I'
      000960 49                    2225 	.db #0x49	; 73	'I'
      000961 49                    2226 	.db #0x49	; 73	'I'
      000962 32                    2227 	.db #0x32	; 50	'2'
      000963 01                    2228 	.db #0x01	; 1
      000964 01                    2229 	.db #0x01	; 1
      000965 7F                    2230 	.db #0x7F	; 127
      000966 01                    2231 	.db #0x01	; 1
      000967 01                    2232 	.db #0x01	; 1
      000968 3F                    2233 	.db #0x3F	; 63
      000969 40                    2234 	.db #0x40	; 64
      00096A 40                    2235 	.db #0x40	; 64
      00096B 40                    2236 	.db #0x40	; 64
      00096C 3F                    2237 	.db #0x3F	; 63
      00096D 1F                    2238 	.db #0x1F	; 31
      00096E 20                    2239 	.db #0x20	; 32
      00096F 40                    2240 	.db #0x40	; 64
      000970 20                    2241 	.db #0x20	; 32
      000971 1F                    2242 	.db #0x1F	; 31
      000972 3F                    2243 	.db #0x3F	; 63
      000973 40                    2244 	.db #0x40	; 64
      000974 38                    2245 	.db #0x38	; 56	'8'
      000975 40                    2246 	.db #0x40	; 64
      000976 3F                    2247 	.db #0x3F	; 63
      000977 63                    2248 	.db #0x63	; 99	'c'
      000978 14                    2249 	.db #0x14	; 20
      000979 08                    2250 	.db #0x08	; 8
      00097A 14                    2251 	.db #0x14	; 20
      00097B 63                    2252 	.db #0x63	; 99	'c'
      00097C 07                    2253 	.db #0x07	; 7
      00097D 08                    2254 	.db #0x08	; 8
      00097E 70                    2255 	.db #0x70	; 112	'p'
      00097F 08                    2256 	.db #0x08	; 8
      000980 07                    2257 	.db #0x07	; 7
      000981 61                    2258 	.db #0x61	; 97	'a'
      000982 51                    2259 	.db #0x51	; 81	'Q'
      000983 49                    2260 	.db #0x49	; 73	'I'
      000984 45                    2261 	.db #0x45	; 69	'E'
      000985 43                    2262 	.db #0x43	; 67	'C'
      000986 00                    2263 	.db #0x00	; 0
      000987 7F                    2264 	.db #0x7F	; 127
      000988 41                    2265 	.db #0x41	; 65	'A'
      000989 41                    2266 	.db #0x41	; 65	'A'
      00098A 00                    2267 	.db #0x00	; 0
      00098B 02                    2268 	.db #0x02	; 2
      00098C 04                    2269 	.db #0x04	; 4
      00098D 08                    2270 	.db #0x08	; 8
      00098E 10                    2271 	.db #0x10	; 16
      00098F 20                    2272 	.db #0x20	; 32
      000990 00                    2273 	.db #0x00	; 0
      000991 41                    2274 	.db #0x41	; 65	'A'
      000992 41                    2275 	.db #0x41	; 65	'A'
      000993 7F                    2276 	.db #0x7F	; 127
      000994 00                    2277 	.db #0x00	; 0
      000995 04                    2278 	.db #0x04	; 4
      000996 02                    2279 	.db #0x02	; 2
      000997 01                    2280 	.db #0x01	; 1
      000998 02                    2281 	.db #0x02	; 2
      000999 04                    2282 	.db #0x04	; 4
      00099A 40                    2283 	.db #0x40	; 64
      00099B 40                    2284 	.db #0x40	; 64
      00099C 40                    2285 	.db #0x40	; 64
      00099D 40                    2286 	.db #0x40	; 64
      00099E 40                    2287 	.db #0x40	; 64
      00099F 00                    2288 	.db #0x00	; 0
      0009A0 01                    2289 	.db #0x01	; 1
      0009A1 02                    2290 	.db #0x02	; 2
      0009A2 04                    2291 	.db #0x04	; 4
      0009A3 00                    2292 	.db #0x00	; 0
      0009A4 20                    2293 	.db #0x20	; 32
      0009A5 54                    2294 	.db #0x54	; 84	'T'
      0009A6 54                    2295 	.db #0x54	; 84	'T'
      0009A7 54                    2296 	.db #0x54	; 84	'T'
      0009A8 78                    2297 	.db #0x78	; 120	'x'
      0009A9 7F                    2298 	.db #0x7F	; 127
      0009AA 50                    2299 	.db #0x50	; 80	'P'
      0009AB 48                    2300 	.db #0x48	; 72	'H'
      0009AC 48                    2301 	.db #0x48	; 72	'H'
      0009AD 30                    2302 	.db #0x30	; 48	'0'
      0009AE 38                    2303 	.db #0x38	; 56	'8'
      0009AF 44                    2304 	.db #0x44	; 68	'D'
      0009B0 44                    2305 	.db #0x44	; 68	'D'
      0009B1 44                    2306 	.db #0x44	; 68	'D'
      0009B2 28                    2307 	.db #0x28	; 40
      0009B3 30                    2308 	.db #0x30	; 48	'0'
      0009B4 48                    2309 	.db #0x48	; 72	'H'
      0009B5 48                    2310 	.db #0x48	; 72	'H'
      0009B6 50                    2311 	.db #0x50	; 80	'P'
      0009B7 7F                    2312 	.db #0x7F	; 127
      0009B8 38                    2313 	.db #0x38	; 56	'8'
      0009B9 54                    2314 	.db #0x54	; 84	'T'
      0009BA 54                    2315 	.db #0x54	; 84	'T'
      0009BB 54                    2316 	.db #0x54	; 84	'T'
      0009BC 18                    2317 	.db #0x18	; 24
      0009BD 08                    2318 	.db #0x08	; 8
      0009BE 7E                    2319 	.db #0x7E	; 126
      0009BF 09                    2320 	.db #0x09	; 9
      0009C0 09                    2321 	.db #0x09	; 9
      0009C1 02                    2322 	.db #0x02	; 2
      0009C2 08                    2323 	.db #0x08	; 8
      0009C3 54                    2324 	.db #0x54	; 84	'T'
      0009C4 54                    2325 	.db #0x54	; 84	'T'
      0009C5 54                    2326 	.db #0x54	; 84	'T'
      0009C6 3C                    2327 	.db #0x3C	; 60
      0009C7 7F                    2328 	.db #0x7F	; 127
      0009C8 10                    2329 	.db #0x10	; 16
      0009C9 08                    2330 	.db #0x08	; 8
      0009CA 08                    2331 	.db #0x08	; 8
      0009CB 70                    2332 	.db #0x70	; 112	'p'
      0009CC 00                    2333 	.db #0x00	; 0
      0009CD 48                    2334 	.db #0x48	; 72	'H'
      0009CE 7A                    2335 	.db #0x7A	; 122	'z'
      0009CF 40                    2336 	.db #0x40	; 64
      0009D0 00                    2337 	.db #0x00	; 0
      0009D1 20                    2338 	.db #0x20	; 32
      0009D2 40                    2339 	.db #0x40	; 64
      0009D3 48                    2340 	.db #0x48	; 72	'H'
      0009D4 3A                    2341 	.db #0x3A	; 58
      0009D5 00                    2342 	.db #0x00	; 0
      0009D6 7F                    2343 	.db #0x7F	; 127
      0009D7 10                    2344 	.db #0x10	; 16
      0009D8 28                    2345 	.db #0x28	; 40
      0009D9 44                    2346 	.db #0x44	; 68	'D'
      0009DA 00                    2347 	.db #0x00	; 0
      0009DB 00                    2348 	.db #0x00	; 0
      0009DC 41                    2349 	.db #0x41	; 65	'A'
      0009DD 7F                    2350 	.db #0x7F	; 127
      0009DE 40                    2351 	.db #0x40	; 64
      0009DF 00                    2352 	.db #0x00	; 0
      0009E0 7C                    2353 	.db #0x7C	; 124
      0009E1 04                    2354 	.db #0x04	; 4
      0009E2 7C                    2355 	.db #0x7C	; 124
      0009E3 04                    2356 	.db #0x04	; 4
      0009E4 78                    2357 	.db #0x78	; 120	'x'
      0009E5 7C                    2358 	.db #0x7C	; 124
      0009E6 08                    2359 	.db #0x08	; 8
      0009E7 04                    2360 	.db #0x04	; 4
      0009E8 04                    2361 	.db #0x04	; 4
      0009E9 78                    2362 	.db #0x78	; 120	'x'
      0009EA 38                    2363 	.db #0x38	; 56	'8'
      0009EB 44                    2364 	.db #0x44	; 68	'D'
      0009EC 44                    2365 	.db #0x44	; 68	'D'
      0009ED 44                    2366 	.db #0x44	; 68	'D'
      0009EE 38                    2367 	.db #0x38	; 56	'8'
      0009EF 7C                    2368 	.db #0x7C	; 124
      0009F0 14                    2369 	.db #0x14	; 20
      0009F1 14                    2370 	.db #0x14	; 20
      0009F2 14                    2371 	.db #0x14	; 20
      0009F3 08                    2372 	.db #0x08	; 8
      0009F4 08                    2373 	.db #0x08	; 8
      0009F5 14                    2374 	.db #0x14	; 20
      0009F6 14                    2375 	.db #0x14	; 20
      0009F7 18                    2376 	.db #0x18	; 24
      0009F8 7C                    2377 	.db #0x7C	; 124
      0009F9 7C                    2378 	.db #0x7C	; 124
      0009FA 08                    2379 	.db #0x08	; 8
      0009FB 04                    2380 	.db #0x04	; 4
      0009FC 04                    2381 	.db #0x04	; 4
      0009FD 08                    2382 	.db #0x08	; 8
      0009FE 48                    2383 	.db #0x48	; 72	'H'
      0009FF 54                    2384 	.db #0x54	; 84	'T'
      000A00 54                    2385 	.db #0x54	; 84	'T'
      000A01 54                    2386 	.db #0x54	; 84	'T'
      000A02 20                    2387 	.db #0x20	; 32
      000A03 04                    2388 	.db #0x04	; 4
      000A04 3F                    2389 	.db #0x3F	; 63
      000A05 44                    2390 	.db #0x44	; 68	'D'
      000A06 44                    2391 	.db #0x44	; 68	'D'
      000A07 20                    2392 	.db #0x20	; 32
      000A08 3C                    2393 	.db #0x3C	; 60
      000A09 40                    2394 	.db #0x40	; 64
      000A0A 40                    2395 	.db #0x40	; 64
      000A0B 20                    2396 	.db #0x20	; 32
      000A0C 7C                    2397 	.db #0x7C	; 124
      000A0D 1C                    2398 	.db #0x1C	; 28
      000A0E 20                    2399 	.db #0x20	; 32
      000A0F 40                    2400 	.db #0x40	; 64
      000A10 20                    2401 	.db #0x20	; 32
      000A11 1C                    2402 	.db #0x1C	; 28
      000A12 3C                    2403 	.db #0x3C	; 60
      000A13 40                    2404 	.db #0x40	; 64
      000A14 38                    2405 	.db #0x38	; 56	'8'
      000A15 40                    2406 	.db #0x40	; 64
      000A16 3C                    2407 	.db #0x3C	; 60
      000A17 44                    2408 	.db #0x44	; 68	'D'
      000A18 28                    2409 	.db #0x28	; 40
      000A19 10                    2410 	.db #0x10	; 16
      000A1A 28                    2411 	.db #0x28	; 40
      000A1B 44                    2412 	.db #0x44	; 68	'D'
      000A1C 0C                    2413 	.db #0x0C	; 12
      000A1D 50                    2414 	.db #0x50	; 80	'P'
      000A1E 50                    2415 	.db #0x50	; 80	'P'
      000A1F 50                    2416 	.db #0x50	; 80	'P'
      000A20 3C                    2417 	.db #0x3C	; 60
      000A21 44                    2418 	.db #0x44	; 68	'D'
      000A22 64                    2419 	.db #0x64	; 100	'd'
      000A23 54                    2420 	.db #0x54	; 84	'T'
      000A24 4C                    2421 	.db #0x4C	; 76	'L'
      000A25 44                    2422 	.db #0x44	; 68	'D'
      000A26 00                    2423 	.db #0x00	; 0
      000A27 08                    2424 	.db #0x08	; 8
      000A28 36                    2425 	.db #0x36	; 54	'6'
      000A29 41                    2426 	.db #0x41	; 65	'A'
      000A2A 00                    2427 	.db #0x00	; 0
      000A2B 00                    2428 	.db #0x00	; 0
      000A2C 00                    2429 	.db #0x00	; 0
      000A2D 7F                    2430 	.db #0x7F	; 127
      000A2E 00                    2431 	.db #0x00	; 0
      000A2F 00                    2432 	.db #0x00	; 0
      000A30 00                    2433 	.db #0x00	; 0
      000A31 41                    2434 	.db #0x41	; 65	'A'
      000A32 36                    2435 	.db #0x36	; 54	'6'
      000A33 08                    2436 	.db #0x08	; 8
      000A34 00                    2437 	.db #0x00	; 0
      000A35 10                    2438 	.db #0x10	; 16
      000A36 08                    2439 	.db #0x08	; 8
      000A37 08                    2440 	.db #0x08	; 8
      000A38 10                    2441 	.db #0x10	; 16
      000A39 08                    2442 	.db #0x08	; 8
      000A3A 06                    2443 	.db #0x06	; 6
      000A3B 09                    2444 	.db #0x09	; 9
      000A3C 09                    2445 	.db #0x09	; 9
      000A3D 06                    2446 	.db #0x06	; 6
      000A3E 00                    2447 	.db #0x00	; 0
      000A3F 00                    2448 	.db #0x00	; 0
      000A40 00                    2449 	.db #0x00	; 0
      000A41 00                    2450 	.db #0x00	; 0
      000A42 F8                    2451 	.db #0xF8	; 248
      000A43 F8                    2452 	.db #0xF8	; 248
      000A44 18                    2453 	.db #0x18	; 24
      000A45 18                    2454 	.db #0x18	; 24
      000A46 18                    2455 	.db #0x18	; 24
      000A47 18                    2456 	.db #0x18	; 24
      000A48 18                    2457 	.db #0x18	; 24
      000A49 18                    2458 	.db #0x18	; 24
      000A4A F8                    2459 	.db #0xF8	; 248
      000A4B F8                    2460 	.db #0xF8	; 248
      000A4C 18                    2461 	.db #0x18	; 24
      000A4D 18                    2462 	.db #0x18	; 24
      000A4E 18                    2463 	.db #0x18	; 24
      000A4F 18                    2464 	.db #0x18	; 24
      000A50 18                    2465 	.db #0x18	; 24
      000A51 18                    2466 	.db #0x18	; 24
      000A52 F8                    2467 	.db #0xF8	; 248
      000A53 F8                    2468 	.db #0xF8	; 248
      000A54 00                    2469 	.db #0x00	; 0
      000A55 00                    2470 	.db #0x00	; 0
      000A56 00                    2471 	.db #0x00	; 0
      000A57 00                    2472 	.db #0x00	; 0
      000A58 00                    2473 	.db #0x00	; 0
      000A59 00                    2474 	.db #0x00	; 0
      000A5A FF                    2475 	.db #0xFF	; 255
      000A5B FF                    2476 	.db #0xFF	; 255
      000A5C 18                    2477 	.db #0x18	; 24
      000A5D 18                    2478 	.db #0x18	; 24
      000A5E 18                    2479 	.db #0x18	; 24
      000A5F 18                    2480 	.db #0x18	; 24
      000A60 18                    2481 	.db #0x18	; 24
      000A61 18                    2482 	.db #0x18	; 24
      000A62 FF                    2483 	.db #0xFF	; 255
      000A63 FF                    2484 	.db #0xFF	; 255
      000A64 18                    2485 	.db #0x18	; 24
      000A65 18                    2486 	.db #0x18	; 24
      000A66 18                    2487 	.db #0x18	; 24
      000A67 18                    2488 	.db #0x18	; 24
      000A68 18                    2489 	.db #0x18	; 24
      000A69 18                    2490 	.db #0x18	; 24
      000A6A FF                    2491 	.db #0xFF	; 255
      000A6B FF                    2492 	.db #0xFF	; 255
      000A6C 00                    2493 	.db #0x00	; 0
      000A6D 00                    2494 	.db #0x00	; 0
      000A6E 00                    2495 	.db #0x00	; 0
      000A6F 00                    2496 	.db #0x00	; 0
      000A70 00                    2497 	.db #0x00	; 0
      000A71 00                    2498 	.db #0x00	; 0
      000A72 1F                    2499 	.db #0x1F	; 31
      000A73 1F                    2500 	.db #0x1F	; 31
      000A74 18                    2501 	.db #0x18	; 24
      000A75 18                    2502 	.db #0x18	; 24
      000A76 18                    2503 	.db #0x18	; 24
      000A77 18                    2504 	.db #0x18	; 24
      000A78 18                    2505 	.db #0x18	; 24
      000A79 18                    2506 	.db #0x18	; 24
      000A7A 1F                    2507 	.db #0x1F	; 31
      000A7B 1F                    2508 	.db #0x1F	; 31
      000A7C 18                    2509 	.db #0x18	; 24
      000A7D 18                    2510 	.db #0x18	; 24
      000A7E 18                    2511 	.db #0x18	; 24
      000A7F 18                    2512 	.db #0x18	; 24
      000A80 18                    2513 	.db #0x18	; 24
      000A81 18                    2514 	.db #0x18	; 24
      000A82 1F                    2515 	.db #0x1F	; 31
      000A83 1F                    2516 	.db #0x1F	; 31
      000A84 00                    2517 	.db #0x00	; 0
      000A85 00                    2518 	.db #0x00	; 0
      000A86 00                    2519 	.db #0x00	; 0
      000A87 18                    2520 	.db #0x18	; 24
      000A88 18                    2521 	.db #0x18	; 24
      000A89 18                    2522 	.db #0x18	; 24
      000A8A 18                    2523 	.db #0x18	; 24
      000A8B 18                    2524 	.db #0x18	; 24
      000A8C 18                    2525 	.db #0x18	; 24
      000A8D 18                    2526 	.db #0x18	; 24
      000A8E 18                    2527 	.db #0x18	; 24
      000A8F 00                    2528 	.db #0x00	; 0
      000A90 00                    2529 	.db #0x00	; 0
      000A91 00                    2530 	.db #0x00	; 0
      000A92 FF                    2531 	.db #0xFF	; 255
      000A93 FF                    2532 	.db #0xFF	; 255
      000A94 00                    2533 	.db #0x00	; 0
      000A95 00                    2534 	.db #0x00	; 0
      000A96 00                    2535 	.db #0x00	; 0
      000A97 18                    2536 	.db #0x18	; 24
      000A98 0C                    2537 	.db #0x0C	; 12
      000A99 06                    2538 	.db #0x06	; 6
      000A9A FF                    2539 	.db #0xFF	; 255
      000A9B FF                    2540 	.db #0xFF	; 255
      000A9C 06                    2541 	.db #0x06	; 6
      000A9D 0C                    2542 	.db #0x0C	; 12
      000A9E 18                    2543 	.db #0x18	; 24
      000A9F 18                    2544 	.db #0x18	; 24
      000AA0 30                    2545 	.db #0x30	; 48	'0'
      000AA1 60                    2546 	.db #0x60	; 96
      000AA2 FF                    2547 	.db #0xFF	; 255
      000AA3 FF                    2548 	.db #0xFF	; 255
      000AA4 60                    2549 	.db #0x60	; 96
      000AA5 30                    2550 	.db #0x30	; 48	'0'
      000AA6 18                    2551 	.db #0x18	; 24
      000AA7 18                    2552 	.db #0x18	; 24
      000AA8 3C                    2553 	.db #0x3C	; 60
      000AA9 7E                    2554 	.db #0x7E	; 126
      000AAA DB                    2555 	.db #0xDB	; 219
      000AAB 99                    2556 	.db #0x99	; 153
      000AAC 18                    2557 	.db #0x18	; 24
      000AAD 18                    2558 	.db #0x18	; 24
      000AAE 18                    2559 	.db #0x18	; 24
      000AAF 18                    2560 	.db #0x18	; 24
      000AB0 18                    2561 	.db #0x18	; 24
      000AB1 18                    2562 	.db #0x18	; 24
      000AB2 99                    2563 	.db #0x99	; 153
      000AB3 DB                    2564 	.db #0xDB	; 219
      000AB4 7E                    2565 	.db #0x7E	; 126
      000AB5 3C                    2566 	.db #0x3C	; 60
      000AB6 18                    2567 	.db #0x18	; 24
      000AB7 7F                    2568 	.db #0x7F	; 127
      000AB8 7F                    2569 	.db #0x7F	; 127
      000AB9 0F                    2570 	.db #0x0F	; 15
      000ABA 1F                    2571 	.db #0x1F	; 31
      000ABB 3B                    2572 	.db #0x3B	; 59
      000ABC 73                    2573 	.db #0x73	; 115	's'
      000ABD E3                    2574 	.db #0xE3	; 227
      000ABE 40                    2575 	.db #0x40	; 64
      000ABF 40                    2576 	.db #0x40	; 64
      000AC0 E3                    2577 	.db #0xE3	; 227
      000AC1 73                    2578 	.db #0x73	; 115	's'
      000AC2 3B                    2579 	.db #0x3B	; 59
      000AC3 1F                    2580 	.db #0x1F	; 31
      000AC4 0F                    2581 	.db #0x0F	; 15
      000AC5 7F                    2582 	.db #0x7F	; 127
      000AC6 7F                    2583 	.db #0x7F	; 127
      000AC7 FE                    2584 	.db #0xFE	; 254
      000AC8 FE                    2585 	.db #0xFE	; 254
      000AC9 F0                    2586 	.db #0xF0	; 240
      000ACA F8                    2587 	.db #0xF8	; 248
      000ACB DC                    2588 	.db #0xDC	; 220
      000ACC CE                    2589 	.db #0xCE	; 206
      000ACD C7                    2590 	.db #0xC7	; 199
      000ACE 02                    2591 	.db #0x02	; 2
      000ACF 02                    2592 	.db #0x02	; 2
      000AD0 C7                    2593 	.db #0xC7	; 199
      000AD1 CE                    2594 	.db #0xCE	; 206
      000AD2 DC                    2595 	.db #0xDC	; 220
      000AD3 F8                    2596 	.db #0xF8	; 248
      000AD4 F0                    2597 	.db #0xF0	; 240
      000AD5 FE                    2598 	.db #0xFE	; 254
      000AD6 FE                    2599 	.db #0xFE	; 254
      000AD7 3C                    2600 	.db #0x3C	; 60
      000AD8 42                    2601 	.db #0x42	; 66	'B'
      000AD9 81                    2602 	.db #0x81	; 129
      000ADA 99                    2603 	.db #0x99	; 153
      000ADB 99                    2604 	.db #0x99	; 153
      000ADC 81                    2605 	.db #0x81	; 129
      000ADD 42                    2606 	.db #0x42	; 66	'B'
      000ADE 3C                    2607 	.db #0x3C	; 60
      000ADF                       2608 ___str_0:
      000ADF 43 48 41 52 47 49 4E  2609 	.ascii "CHARGING"
             47
      000AE7 00                    2610 	.db 0x00
      000AE8                       2611 ___str_1:
      000AE8 50 4F 57 45 52 20 4F  2612 	.ascii "POWER ON"
             4E
      000AF0 00                    2613 	.db 0x00
      000AF1                       2614 ___str_2:
      000AF1 50 4F 57 52 20 4F 46  2615 	.ascii "POWR OFF"
             46
      000AF9 00                    2616 	.db 0x00
      000AFA                       2617 ___str_3:
      000AFA 20 20 20 20 20 20 20  2618 	.ascii "        "
             20
      000B02 00                    2619 	.db 0x00
      000B03                       2620 ___str_4:
      000B03 62 6F 6E 75 73 6F 69  2621 	.ascii "bonusoid"
             64
      000B0B 00                    2622 	.db 0x00
      000B0C                       2623 ___str_5:
      000B0C 42 43 48 52 47        2624 	.ascii "BCHRG"
      000B11 00                    2625 	.db 0x00
      000B12                       2626 ___str_6:
      000B12 42 46 55 4C 4C        2627 	.ascii "BFULL"
      000B17 00                    2628 	.db 0x00
      000B18                       2629 ___str_7:
      000B18 4E 4F 43 48 47        2630 	.ascii "NOCHG"
      000B1D 00                    2631 	.db 0x00
      000B1E                       2632 ___str_8:
      000B1E 4E 4F 42 41 54        2633 	.ascii "NOBAT"
      000B23 00                    2634 	.db 0x00
      000B24                       2635 ___str_9:
      000B24 55 4E 4B 57 4E        2636 	.ascii "UNKWN"
      000B29 00                    2637 	.db 0x00
      000B2A                       2638 ___str_10:
      000B2A 6D 56                 2639 	.ascii "mV"
      000B2C 00                    2640 	.db 0x00
                                   2641 	.area INITIALIZER
                                   2642 	.area CABS (ABS)
